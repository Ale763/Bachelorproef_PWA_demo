{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/thread-loader/dist/cjs.js!/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js!/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js!/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ale/Documents/Bachproef/pwa-3/src/views/Update.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/views/Update.vue","mtime":1561057561961},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/Users/ale/Documents/Bachproef/pwa-3/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ale/Documents/Bachproef/pwa-3/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { FirebaseService } from \"../services/FirebaseService\";\nimport * as localForage from \"localforage\";\nexport default {\n  name: \"Update\",\n  data: function data() {\n    return {\n      service_worker: null,\n      newWorker: null,\n      pageTitle: \"Update\",\n      swName: \"sw.js\",\n      lf: null,\n      firebaseToken: null,\n      update: false,\n      multiclient: false,\n      multiClientUpdate: false,\n      refreshing: false\n    };\n  },\n  computed: {},\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var key;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Creating Update, \", window.location.pathname);\n              _context.next = 3;\n              return localForage.createInstance({\n                name: \"lf\"\n              });\n\n            case 3:\n              this.lf = _context.sent;\n              _context.next = 6;\n              return this.lf.getItem(\"VersionSW\");\n\n            case 6:\n              key = _context.sent;\n              if (key == null) this.lf.setItem(\"VersionSW\", 0);\n              this.install_sw();\n              setTimeout(function () {\n                var img = document.createElement(\"img\");\n                img.src = \"/img/horse.png\";\n                img.style = \"max-width: 100%; height: 250px;\";\n\n                if (document.getElementById(\"imgElement\")) {\n                  document.getElementById(\"imgElement\").appendChild(img);\n                }\n              }, 4500);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    install_sw: function () {\n      var _install_sw = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var pathName, key;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                pathName = window.location.pathname; // console.log(pathName);\n\n                if (!(pathName === \"/\")) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.next = 5;\n                return this.lf.getItem(\"VersionSW\");\n\n              case 5:\n                key = _context2.sent;\n                if (key == null) key = 0;\n\n                if (pathName === \"/update-without-skip-and-claim\") {\n                  this.pageTitle = \"Default update\";\n                  if (key === 0) this.swName = \"/sw-without-skip-and-claim.js\";else this.swName = \"/sw-without-skip-and-claim-2.js\";\n                } else if (pathName === \"/update-with-skip-no-claim\") {\n                  this.pageTitle = \"Forced update\";\n                  if (key === 0) this.swName = \"/sw-with-skip-no-claim.js\";else this.swName = \"/sw-with-skip-no-claim-2.js\";\n                } else if (pathName === \"/update-with-skip-and-claim\") {\n                  this.pageTitle = \"Forced update & immediate control\";\n                  if (key === 0) this.swName = \"/sw-with-skip-and-claim.js\";else this.swName = \"/sw-with-skip-and-claim-2.js\";\n                } else if (pathName === \"/single-client-update\") {\n                  this.pageTitle = \"Single Client Update\";\n                  if (key === 0) this.swName = \"/sw-single-client-update.js\";else this.swName = \"/sw-single-client-update-2.js\";\n                } else if (pathName === \"/multi-client-update\") {\n                  this.pageTitle = \"Multi Client Update\";\n                  this.multiclient = true;\n                  if (key === 0) this.swName = \"/sw-multi-client-update.js\";else this.swName = \"/sw-multi-client-update-2.js\";\n                }\n\n                navigator.serviceWorker.register(this.swName, {\n                  scope: pathName\n                }).then(function (registration) {\n                  _this.registration = registration;\n\n                  _this._updateListener();\n\n                  if (_this.multiclient) {\n                    var THIS = _this;\n                    navigator.serviceWorker.addEventListener('controllerchange', function () {\n                      if (THIS.refreshing) return;\n                      THIS.refreshing = true;\n                      window.location.reload();\n                    });\n                  }\n                }, function (err) {\n                  console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function install_sw() {\n        return _install_sw.apply(this, arguments);\n      }\n\n      return install_sw;\n    }(),\n    _updateListener: function _updateListener() {\n      var _this2 = this;\n\n      // Service worker has installed in the background during a previous page load\n      if (this.registration.waiting && this.registration.active) {\n        this._setUpdateStatus(true);\n\n        this.newWorker = this.registration.waiting;\n      } else {\n        // Monitor service worker for new version\n        this.registration.addEventListener(\"updatefound\", function () {\n          _this2.newWorker = _this2.registration.installing; // Monitor controllerchange for when a new version takes over\n\n          _this2.registration.addEventListener('controllerchange', function () {\n            // Remove update available when new service worker activates\n            _this2._setUpdateStatus(false);\n          }); // Monitor new service worker for statechanges\n\n\n          _this2.newWorker.addEventListener(\"statechange\", function () {\n            // Has service worker state changed?\n            switch (_this2.newWorker.state) {\n              case \"installed\":\n                // There is a new service worker available, show the notification\n                console.log(\"SW DETECTING UPDATE 2\");\n\n                _this2._setUpdateStatus(true);\n\n                break;\n\n              case \"activated\":\n                // There is a new service worker available, show the notification\n                if (navigator.serviceWorker.controller) {\n                  console.log(\"SW ACTIVATED\");\n\n                  _this2._setUpdateStatus(false);\n                }\n\n                if (_this2.lf.getItem(\"updating\")) {// window.location.reload();\n                }\n\n                break;\n            }\n          });\n        });\n      }\n    },\n    unregister_sw: function unregister_sw() {\n      this.registration.unregister().then(function () {\n        console.log(\"Unregister\");\n      });\n    },\n    toggleSW: function () {\n      var _toggleSW = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var key;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.lf.setItem(\"UAV\", true);\n                _context3.next = 3;\n                return this.lf.getItem(\"VersionSW\");\n\n              case 3:\n                key = _context3.sent;\n\n                if (key === 1 || key == null) {\n                  this.lf.setItem(\"VersionSW\", 0);\n                } else {\n                  this.lf.setItem(\"VersionSW\", 1);\n                }\n\n                this.registration.update();\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function toggleSW() {\n        return _toggleSW.apply(this, arguments);\n      }\n\n      return toggleSW;\n    }(),\n    request_from_sw: function request_from_sw() {\n      var _this3 = this;\n\n      var pathName = window.location.pathname;\n      this.registration.update();\n      var request = new Request(\"/\".concat(this.swName));\n      var requestOptions = {\n        method: \"GET\"\n      };\n      return fetch(request, requestOptions).then(function (response) {\n        navigator.serviceWorker.register(_this3.swName, {\n          scope: pathName\n        }).then(function (registration) {\n          _this3.registration = registration;\n        }, function (err) {\n          console.log(\"SW UPDATE_DEMO FAILED: \", err);\n        }).then(function () {\n          _this3.service_worker = navigator.serviceWorker;\n          return navigator.serviceWorker.ready;\n        });\n        return response;\n      }).catch(function (error) {\n        console.error(error);\n        console.error(_JSON$stringify(error));\n        return {\n          request: request,\n          response: response\n        };\n      });\n    },\n    send_new_sw: function send_new_sw() {\n      this.$emit(\"updateRequest\");\n    },\n    update_sw: function update_sw() {\n      this.newWorker.postMessage({\n        action: 'skipWaiting'\n      });\n    },\n    getSWClients: function getSWClients() {\n      if (navigator.serviceWorker.controller) {\n        var messageChannel = new MessageChannel();\n\n        messageChannel.port1.onmessage = function (event) {\n          console.log(\"Response from the SW : \", event.data.message);\n        };\n\n        console.log(\"Sending message to the service worker\");\n        navigator.serviceWorker.controller.postMessage({\n          command: \"twoWayCommunication\",\n          message: \"Hi, SW\"\n        }, [messageChannel.port2]);\n      } else {\n        console.log(\"No active ServiceWorker\");\n      }\n    },\n    _navigateTo: function _navigateTo(url) {\n      window.location = url;\n    },\n    _setUpdateStatus: function _setUpdateStatus(status) {\n      if (this.registration.active) {\n        this.update = status;\n        if (this.multiclient) this.multiClientUpdate = status;\n      }\n    }\n  }\n};",{"version":3,"sources":["Update.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div style=\"margin: 0 auto; padding: 1rem;\">\n    <h2 style=\"text-align: right\">\n        <div v-if=\"update\" style=\"color: dodgerblue;\">\n            <v-icon style=\"color: dodgerblue;padding-right: 1rem;\">update</v-icon>\n            Update available\n        </div>\n        <div v-if=\"!update\" style>\n            <v-icon style=\"padding-right: 1rem;\">update</v-icon>No update available\n        </div>\n    </h2>\n    <div style=\"display:block;text-align: center\">\n        <img\n        src=\"/img/horse.png\"\n        style=\"display:block; height: 250px; max-width: 100%; margin: 0 auto\"\n      >\n        <div id=\"imgElement\" style=\"display:block; height: 250px; max-width: 100%;\"></div>\n    </div>\n    <div style=\"width: 100%;text-align: center;\">\n        <v-btn round dark color=\"teal\" v-on:click=\"toggleSW()\">Update SW</v-btn>\n        <v-btn round dark color=\"teal\" v-on:click=\"unregister_sw()\">Unregister SW</v-btn>\n    </div>\n    <v-snackbar v-model=\"multiClientUpdate\" :timeout=\"0\" :vertical=true>\n        A new update is available.\n        All pages will be reloaded after the update is complete.\n        Please update.\n        <v-btn dark flat @click=\"update_sw\">\n            Update\n        </v-btn>\n        <v-btn dark flat @click=\"multiClientUpdate = false\">\n            Close\n        </v-btn>\n    </v-snackbar>\n</div>\n</template>\n\n<script>\nimport\n{\n    FirebaseService\n}\nfrom \"../services/FirebaseService\";\nimport * as localForage from \"localforage\";\n\nexport default\n{\n    name: \"Update\",\n    data()\n    {\n        return {\n            service_worker: null,\n            newWorker: null,\n            pageTitle: \"Update\",\n            swName: \"sw.js\",\n            lf: null,\n            firebaseToken: null,\n            update: false,\n            multiclient: false,\n            multiClientUpdate: false,\n            refreshing: false\n        };\n    },\n    computed:\n    {},\n    async created()\n    {\n        console.log(\"Creating Update, \", window.location.pathname);\n        this.lf = await localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n\n        let key = await this.lf.getItem(\"VersionSW\");\n        if (key == null) this.lf.setItem(\"VersionSW\", 0);\n        this.install_sw();\n        setTimeout(() =>\n        {\n            let img = document.createElement(\"img\");\n            img.src = \"/img/horse.png\";\n            img.style = \"max-width: 100%; height: 250px;\";\n            if (document.getElementById(\"imgElement\"))\n            {\n                document.getElementById(\"imgElement\").appendChild(img);\n            }\n        }, 4500);\n    },\n    methods:\n    {\n        async install_sw()\n        {\n            const pathName = window.location.pathname;\n            // console.log(pathName);\n            if (pathName === \"/\") return;\n            let key = await this.lf.getItem(\"VersionSW\");\n            if (key == null) key = 0;\n            if (pathName === \"/update-without-skip-and-claim\")\n            {\n                this.pageTitle = \"Default update\";\n                if (key === 0) this.swName = \"/sw-without-skip-and-claim.js\";\n                else this.swName = \"/sw-without-skip-and-claim-2.js\";\n            }\n            else if (pathName === \"/update-with-skip-no-claim\")\n            {\n                this.pageTitle = \"Forced update\";\n                if (key === 0) this.swName = \"/sw-with-skip-no-claim.js\";\n                else this.swName = \"/sw-with-skip-no-claim-2.js\";\n            }\n            else if (pathName === \"/update-with-skip-and-claim\")\n            {\n                this.pageTitle = \"Forced update & immediate control\";\n                if (key === 0) this.swName = \"/sw-with-skip-and-claim.js\";\n                else this.swName = \"/sw-with-skip-and-claim-2.js\";\n            }\n            else if (pathName === \"/single-client-update\")\n            {\n                this.pageTitle = \"Single Client Update\";\n                if (key === 0) this.swName = \"/sw-single-client-update.js\";\n                else this.swName = \"/sw-single-client-update-2.js\";\n            }\n            else if (pathName === \"/multi-client-update\")\n            {\n                this.pageTitle = \"Multi Client Update\";\n                this.multiclient = true;\n                if (key === 0) this.swName = \"/sw-multi-client-update.js\";\n                else this.swName = \"/sw-multi-client-update-2.js\";\n            }\n            navigator.serviceWorker.register(this.swName,\n            {\n                scope: pathName\n            }).then(registration =>\n                {\n                    this.registration = registration;\n                    this._updateListener();\n\n                    if (this.multiclient)\n                    {\n\n                        let THIS = this;\n                        navigator.serviceWorker.addEventListener('controllerchange',\n                            function ()\n                            {\n                                if (THIS.refreshing) return;\n                                THIS.refreshing = true;\n                                window.location.reload();\n                            }\n                        );\n                    }\n                },\n                err =>\n                {\n                    console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                }\n            );\n        },\n        _updateListener()\n        {\n            // Service worker has installed in the background during a previous page load\n            if (this.registration.waiting && this.registration.active)\n            {\n                this._setUpdateStatus(true);\n                this.newWorker = this.registration.waiting;\n            }\n            else\n            {\n                // Monitor service worker for new version\n                this.registration.addEventListener(\"updatefound\", () =>\n                {\n                    this.newWorker = this.registration.installing;\n\n                    // Monitor controllerchange for when a new version takes over\n                    this.registration.addEventListener('controllerchange', () =>\n                    {\n                        // Remove update available when new service worker activates\n                        this._setUpdateStatus(false);\n                    });\n\n                    // Monitor new service worker for statechanges\n                    this.newWorker.addEventListener(\"statechange\", () =>\n                    {\n                        // Has service worker state changed?\n                        switch (this.newWorker.state)\n                        {\n                            case \"installed\":\n                                // There is a new service worker available, show the notification\n                                console.log(\"SW DETECTING UPDATE 2\");\n                                this._setUpdateStatus(true);\n                                break;\n                            case \"activated\":\n                                // There is a new service worker available, show the notification\n                                if (navigator.serviceWorker.controller)\n                                {\n                                    console.log(\"SW ACTIVATED\");\n                                    this._setUpdateStatus(false);\n                                }\n                                if (this.lf.getItem(\"updating\"))\n                                {\n                                    // window.location.reload();\n                                }\n                                break;\n                        }\n                    });\n                });\n            }\n        },\n        unregister_sw()\n        {\n            this.registration.unregister().then(() =>\n            {\n                console.log(\"Unregister\");\n            });\n        },\n        async toggleSW()\n        {\n            this.lf.setItem(\"UAV\", true);\n            let key = await this.lf.getItem(\"VersionSW\");\n            if (key === 1 || key == null)\n            {\n                this.lf.setItem(\"VersionSW\", 0);\n            }\n            else\n            {\n                this.lf.setItem(\"VersionSW\", 1);\n            }\n            this.registration.update();\n        },\n        request_from_sw()\n        {\n            const pathName = window.location.pathname;\n            this.registration.update();\n            let request = new Request(`/${this.swName}`);\n            const requestOptions = {\n                method: \"GET\"\n            };\n            return fetch(request, requestOptions)\n                .then(response =>\n                {\n                    navigator.serviceWorker\n                        .register(this.swName,\n                        {\n                            scope: pathName\n                        })\n                        .then(\n                            registration =>\n                            {\n                                this.registration = registration;\n                            },\n                            err =>\n                            {\n                                console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                            }\n                        )\n                        .then(() =>\n                        {\n                            this.service_worker = navigator.serviceWorker;\n                            return navigator.serviceWorker.ready;\n                        });\n                    return response;\n                })\n\n                .catch(error =>\n                {\n                    console.error(error);\n                    console.error(JSON.stringify(error));\n                    return {\n                        request: request,\n                        response: response\n                    };\n                });\n        },\n        send_new_sw()\n        {\n            this.$emit(\"updateRequest\");\n        },\n\n        update_sw()\n        {\n            this.newWorker.postMessage(\n            {\n                action: 'skipWaiting'\n            });\n        },\n        getSWClients()\n        {\n            if (navigator.serviceWorker.controller)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    console.log(\"Response from the SW : \", event.data.message);\n                };\n                console.log(\"Sending message to the service worker\");\n                navigator.serviceWorker.controller.postMessage(\n                    {\n                        command: \"twoWayCommunication\",\n                        message: \"Hi, SW\"\n                    },\n                    [messageChannel.port2]\n                );\n            }\n            else\n            {\n                console.log(\"No active ServiceWorker\");\n            }\n        },\n        _navigateTo(url)\n        {\n            window.location = url;\n        },\n        _setUpdateStatus(status)\n        {\n            if (this.registration.active)\n            {\n                this.update = status;\n                if (this.multiclient)\n                    this.multiClientUpdate = status;\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n</style>\n"],"sourceRoot":"src/views"}]}