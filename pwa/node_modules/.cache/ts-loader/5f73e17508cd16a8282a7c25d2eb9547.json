{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js!/Users/ale/Documents/Bachproef/pwa-3/node_modules/ts-loader/index.js??ref--13-2!/Users/ale/Documents/Bachproef/pwa-3/src/store/modules/posts.ts","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/store/modules/posts.ts","mtime":1556168882122},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"/Users/ale/Documents/Bachproef/pwa-3/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ale/Documents/Bachproef/pwa-3/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find\";\nimport { JSONPlaceholderAPI } from '@/services/JSONPlaceholderAPI';\nvar jsonplaceholderApiService = new JSONPlaceholderAPI();\nvar posts = {\n  namespaced: true,\n  state: {\n    posts: []\n  },\n  getters: {\n    post: function post(state) {\n      return function (id) {\n        return state.posts.find(function (post) {\n          return post.getId() === id;\n        });\n      };\n    },\n    allPosts: function allPosts(state) {\n      return state.posts;\n    }\n  },\n  actions: {\n    fetchPost: function () {\n      var _fetchPost = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref, id) {\n        var commit, post;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit;\n                _context.next = 3;\n                return jsonplaceholderApiService.getPost(id);\n\n              case 3:\n                post = _context.sent;\n                commit('delPost', post);\n                commit('addPost', post); // console.log('Fetch post done');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fetchPost(_x, _x2) {\n        return _fetchPost.apply(this, arguments);\n      }\n\n      return fetchPost;\n    }(),\n    deletePost: function () {\n      var _deletePost = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref2, id) {\n        var commit, post;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref2.commit;\n                _context2.next = 3;\n                return jsonplaceholderApiService.getPost(id);\n\n              case 3:\n                post = _context2.sent;\n                commit('delPost', post);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function deletePost(_x3, _x4) {\n        return _deletePost.apply(this, arguments);\n      }\n\n      return deletePost;\n    }()\n  },\n  mutations: {\n    addPost: function addPost(state, post) {\n      state.posts = [].concat(_toConsumableArray(state.posts), [post]);\n    },\n    delPost: function delPost(state, post) {\n      // console.log(\"POST: \", post);\n      var index = state.posts.findIndex(function (item) {\n        return item.getId() === post.getId();\n      }); // console.log('Index: ', index);\n\n      if (index !== -1) {\n        state.posts.splice(index, 1);\n      }\n    }\n  }\n}; // };\n\nexport default posts;",{"version":3,"sources":["/Users/ale/Documents/Bachproef/pwa-3/src/store/modules/posts.ts"],"names":[],"mappings":";;;;;AAEA,SAAQ,kBAAR,QAAiC,+BAAjC;AAEA,IAAM,yBAAyB,GAAG,IAAI,kBAAJ,EAAlC;AAEA,IAAM,KAAK,GAAG;AACb,EAAA,UAAU,EAAE,IADC;AAEb,EAAA,KAAK,EACL;AACC,IAAA,KAAK,EAAE;AADR,GAHa;AAMb,EAAA,OAAO,EACP;AACC,IAAA,IAAI,EAAE,cAAC,KAAD;AAAA,aAAgB,UAAC,EAAD,EAAe;AAEpC,eAAO,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAiB,UAAC,IAAD;AAAA,iBAAgB,IAAI,CAAC,KAAL,OAAiB,EAAjC;AAAA,SAAjB,CAAP;AACA,OAHK;AAAA,KADP;AAKC,IAAA,QAAQ,EAAE,kBAAC,KAAD;AAAA,aAAgB,KAAK,CAAC,KAAtB;AAAA;AALX,GAPa;AAcb,EAAA,OAAO,EACP;AACO,IAAA,SADP;AAAA;AAAA;AAAA,qDACgC,EADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACkB,gBAAA,MADlB,QACkB,MADlB;AAAA;AAAA,uBAIqB,yBAAyB,CAAC,OAA1B,CAAkC,EAAlC,CAJrB;;AAAA;AAIQ,gBAAA,IAJR;AAKE,gBAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,CAAN;AACA,gBAAA,MAAM,CAAC,SAAD,EAAY,IAAZ,CAAN,CANF,CAOE;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AASO,IAAA,UATP;AAAA;AAAA;AAAA,uDASiC,EATjC;AAAA;AAAA;AAAA;AAAA;AAAA;AASmB,gBAAA,MATnB,SASmB,MATnB;AAAA;AAAA,uBAWqB,yBAAyB,CAAC,OAA1B,CAAkC,EAAlC,CAXrB;;AAAA;AAWQ,gBAAA,IAXR;AAYE,gBAAA,MAAM,CAAC,SAAD,EAAW,IAAX,CAAN;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAfa;AA8Bb,EAAA,SAAS,EACT;AACC,IAAA,OADD,mBACS,KADT,EACqB,IADrB,EAC+B;AAAI,MAAA,KAAK,CAAC,KAAN,gCAAkB,KAAK,CAAC,KAAxB,IAA+B,IAA/B;AAAuC,KAD1E;AAGC,IAAA,OAHD,mBAGS,KAHT,EAGqB,IAHrB,EAG+B;AAE7B;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,SAAZ,CAAsB,UAAC,IAAD;AAAA,eAAgB,IAAI,CAAC,KAAL,OAAiB,IAAI,CAAC,KAAL,EAAjC;AAAA,OAAtB,CAAd,CAH6B,CAI7B;;AACA,UAAI,KAAK,KAAK,CAAC,CAAf,EACA;AACC,QAAA,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAmB,KAAnB,EAA0B,CAA1B;AACA;AACD;AAZF;AA/Ba,CAAd,C,CA+CA;;AAGA,eAAe,KAAf","sourcesContent":["// tslint:disable-next-line:import-spacing\nimport {Post}               from '@/objects/Post';\nimport {JSONPlaceholderAPI} from '@/services/JSONPlaceholderAPI';\n\nconst jsonplaceholderApiService = new JSONPlaceholderAPI();\n\nconst posts = {\n\tnamespaced: true,\n\tstate:\n\t{\n\t\tposts: [],\n\t},\n\tgetters:\n\t{\n\t\tpost: (state: any) => (id: number) =>\n\t\t{\n\t\t\treturn state.posts.find((post: Post) => post.getId() === id);\n\t\t},\n\t\tallPosts: (state: any) => state.posts,\n\t},\n\tactions:\n\t{\n\t\tasync fetchPost({commit}: any, id: number)\n\t\t{\n\t\t\t// console.log(`Fetching post ${id}...`);\n\t\t\tconst post = await jsonplaceholderApiService.getPost(id);\n\t\t\tcommit('delPost', post);\n\t\t\tcommit('addPost', post);\n\t\t\t// console.log('Fetch post done');\n\t\t},\n\t\tasync deletePost({commit}: any, id: number)\n\t\t{\n\t\t\tconst post = await jsonplaceholderApiService.getPost(id);\n\t\t\tcommit('delPost',post);\n\t\t}\n\t},\n\tmutations:\n\t{\n\t\taddPost(state: any, post: Post) { state.posts = [...state.posts, post]; }\n\t\t,\n\t\tdelPost(state: any, post: Post)\n\t\t{\n\t\t\t// console.log(\"POST: \", post);\n\t\t\tconst index = state.posts.findIndex((item: Post) => item.getId() === post.getId());\n\t\t\t// console.log('Index: ', index);\n\t\t\tif (index !== -1)\n\t\t\t{\n\t\t\t\tstate.posts.splice(index, 1);\n\t\t\t}\n\t\t},\n\t},\n};\n\n// };\n\n\nexport default posts;\n"],"sourceRoot":""}]}