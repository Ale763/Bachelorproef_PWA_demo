{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/thread-loader/dist/cjs.js!/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js!/Users/ale/Documents/Bachproef/pwa-3/node_modules/ts-loader/index.js??ref--13-3!/Users/ale/Documents/Bachproef/pwa-3/src/modules/ServiceWorkerLib.ts","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/modules/ServiceWorkerLib.ts","mtime":1558373412772},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/ale/Documents/Bachproef/pwa-3/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ale/Documents/Bachproef/pwa-3/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nexport var ServiceWorkerLib =\n/*#__PURE__*/\nfunction () {\n  function ServiceWorkerLib(swPath, scope) {\n    var _this = this;\n\n    _classCallCheck(this, ServiceWorkerLib);\n\n    this._swPath = swPath;\n    this._scope = scope;\n    this.register(this._swPath, this._scope).then(function (registration) {\n      _this._currentRegistration = registration;\n\n      _this._detectNewServiceWorker();\n    }).catch(function (err) {\n      // registration failed :(\n      console.error('SW registration failed: ', err);\n    });\n  } // ===================================================================================================\n  // Getters & setters\n\n\n  _createClass(ServiceWorkerLib, [{\n    key: \"getSWPath\",\n    value: function getSWPath() {\n      return this._swPath;\n    }\n  }, {\n    key: \"setSWPath\",\n    value: function setSWPath(value) {\n      this._swPath = value;\n    }\n  }, {\n    key: \"getScope\",\n    value: function getScope() {\n      return this._scope;\n    }\n  }, {\n    key: \"setScope\",\n    value: function setScope(value) {\n      this._scope = value;\n    }\n  }, {\n    key: \"getCurrentWorker\",\n    value: function getCurrentWorker() {\n      return this._currentRegistration.active;\n    }\n  }, {\n    key: \"setCurrentWorker\",\n    value: function setCurrentWorker(value) {\n      this._currentWorker = value;\n    }\n  }, {\n    key: \"getCurrentRegistration\",\n    value: function getCurrentRegistration() {\n      return this._currentRegistration;\n    }\n  }, {\n    key: \"setCurrentRegistration\",\n    value: function setCurrentRegistration(value) {\n      this._currentRegistration = value;\n    }\n  }, {\n    key: \"getNewWorker\",\n    value: function getNewWorker() {\n      return this._newWorker;\n    }\n  }, {\n    key: \"setNewWorker\",\n    value: function setNewWorker(value) {\n      this._newWorker = value;\n    } // ===================================================================================================\n    // Main functions\n\n  }, {\n    key: \"register\",\n    value: function register(swPath, scope) {\n      var _this2 = this;\n\n      return navigator.serviceWorker.register(swPath, {\n        scope: scope\n      }).then(function (registration) {\n        return registration;\n      }).catch(function (error) {\n        return console.error(\"\".concat(_this2._swPath, \" registration failed: \"), error);\n      });\n    } // public getNewWorker(registration: any)\n    // {\n    // \tif (registration.waiting && registration.active)\n    // \t{\n    // \t\treturn registration.waiting;\n    // \t} else\n    // \t{\n    // \t\tregistration.addEventListener(\n    // \t\t'updatefound',\n    // \t\t() =>\n    // \t\t{\n    // \t\t\treturn registration.installing;\n    //\n    //\n    // \t\t});\n    // \t}\n    // }\n\n  }, {\n    key: \"_detectNewServiceWorker\",\n    value: function _detectNewServiceWorker() {\n      var _this3 = this;\n\n      var evt = document.createEvent('Event'); // Source: https://stackoverflow.com/questions/37573482/to-check-if-serviceworker-is-in-waiting-state\n\n      if (this._currentRegistration.waiting && this._currentRegistration.active) {\n        this._newWorker = this._currentRegistration.waiting;\n        evt.initEvent('newSW', true, true);\n        window.dispatchEvent(evt);\n      } else {\n        this._currentRegistration.addEventListener('updatefound', function () {\n          _this3._newWorker = _this3._currentRegistration.installing;\n\n          _this3._newWorker.addEventListener('statechange', function () {\n            // Has service worker state changed?\n            switch (_this3._newWorker.state) {\n              case 'installed':\n                // There is a new service worker available, show the notification\n                if (navigator.serviceWorker.controller) {\n                  console.log('NEW SW AVAILABLE');\n                  evt.initEvent('newSW', true, true);\n                  document.dispatchEvent(evt);\n                }\n\n                break;\n            }\n          });\n        });\n      }\n    }\n  }]);\n\n  return ServiceWorkerLib;\n}();",{"version":3,"sources":["/Users/ale/Documents/Bachproef/pwa-3/src/modules/ServiceWorkerLib.ts"],"names":[],"mappings":"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","sourcesContent":["export class ServiceWorkerLib\n{\n\n\t// ===================================================================================================\n\t// Data\n\tprivate _swPath: string;\n\tprivate _scope: string;\n\tprivate _currentWorker: any;\n\tprivate _currentRegistration: any;\n\tprivate _newWorker: any;\n\n\tconstructor(swPath: string, scope: string)\n\t{\n\t\tthis._swPath = swPath;\n\t\tthis._scope = scope;\n\t\tthis.register(this._swPath, this._scope)\n\t\t    .then((registration: any) =>\n\t\t          {\n\t\t\t          this._currentRegistration = registration;\n\t\t\t          this._detectNewServiceWorker();\n\t\t          })\n\t\t    .catch((err: any) =>\n\t\t           {\n\t\t\t           // registration failed :(\n\t\t\t           console.error('SW registration failed: ', err);\n\t\t           });\n\n\t}\n\t// ===================================================================================================\n\t// Getters & setters\n\n\tpublic getSWPath() { return this._swPath; }\n\tpublic setSWPath(value: string) { this._swPath = value; }\n\tpublic getScope() { return this._scope; }\n\tpublic setScope(value: string) { this._scope = value; }\n\tpublic getCurrentWorker() { return this._currentRegistration.active; }\n\tpublic setCurrentWorker(value: any) { this._currentWorker = value; }\n\tpublic getCurrentRegistration() { return this._currentRegistration; }\n\tpublic setCurrentRegistration(value: any) { this._currentRegistration = value; }\n\tpublic getNewWorker() { return this._newWorker; }\n\tpublic setNewWorker(value: any) { this._newWorker = value; }\n\n\t// ===================================================================================================\n\t// Main functions\n\tpublic register(swPath: string, scope: string)\n\t{\n\t\treturn navigator.serviceWorker.register(swPath, {scope})\n\t\t                .then((registration: any) => { return registration})\n\t\t                .catch((error: any) => console.error(`${this._swPath} registration failed: `, error));\n\t}\n\n\t// public getNewWorker(registration: any)\n\t// {\n\t// \tif (registration.waiting && registration.active)\n\t// \t{\n\t// \t\treturn registration.waiting;\n\t// \t} else\n\t// \t{\n\t// \t\tregistration.addEventListener(\n\t// \t\t'updatefound',\n\t// \t\t() =>\n\t// \t\t{\n\t// \t\t\treturn registration.installing;\n\t//\n\t//\n\t// \t\t});\n\t// \t}\n\t// }\n\n\tprivate _detectNewServiceWorker()\n\t{\n\t\tconst evt = document.createEvent('Event');\n\t\t// Source: https://stackoverflow.com/questions/37573482/to-check-if-serviceworker-is-in-waiting-state\n\t\tif (this._currentRegistration.waiting && this._currentRegistration.active)\n\t\t{\n\t\t\tthis._newWorker = this._currentRegistration.waiting;\n\t\t\tevt.initEvent('newSW', true, true);\n\t\t\twindow.dispatchEvent(evt);\n\t\t} else\n\t\t{\n\t\t\tthis._currentRegistration\n\t\t\t    .addEventListener('updatefound', () =>\n\t\t\t    {\n\t\t\t\t    this._newWorker = this._currentRegistration.installing;\n\n\t\t\t\t    this._newWorker\n\t\t\t\t        .addEventListener('statechange', () =>\n\t\t\t\t        {\n\t\t\t\t\t        // Has service worker state changed?\n\t\t\t\t\t        switch (this._newWorker.state)\n\t\t\t\t\t        {\n\t\t\t\t\t\t        case 'installed':\n\n\t\t\t\t\t\t\t        // There is a new service worker available, show the notification\n\t\t\t\t\t\t\t        if (navigator.serviceWorker.controller)\n\t\t\t\t\t\t\t        {\n\t\t\t\t\t\t\t\t        console.log('NEW SW AVAILABLE');\n\t\t\t\t\t\t\t\t        evt.initEvent('newSW', true, true);\n\t\t\t\t\t\t\t\t        document.dispatchEvent(evt);\n\t\t\t\t\t\t\t        }\n\t\t\t\t\t\t\t        break;\n\t\t\t\t\t        }\n\t\t\t\t        });\n\t\t\t    });\n\t\t}\n\t}\n\n\t// ===================================================================================================\n\t// Event listeners\n\n\n\t// ===================================================================================================\n\t// Helper functions\n\n\n}\n\n"],"sourceRoot":""}]}