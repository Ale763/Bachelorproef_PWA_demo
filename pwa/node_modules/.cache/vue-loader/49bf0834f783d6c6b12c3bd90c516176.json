{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ale/Documents/Bachproef/pwa-3/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/App.vue","mtime":1560531419302},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Overwrite v-alert icon color\n.v-alert .v-alert__icon.v-icon,\n.v-alert__dismissible .v-icon {\n    color: white !important;\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAseA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n<v-app>\n    <v-toolbar app>\n        <v-toolbar-side-icon v-on:click=\"callChild()\"></v-toolbar-side-icon>\n        <v-toolbar-title class=\"black--text\">{{pageTitle}}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-icon v-if=\"offline\">cloud_off</v-icon>\n        <v-btn v-if=\"showPWAInstall\" icon @click=\"_firebaseRequestPermission()\">\n            <v-icon>get_app</v-icon>\n        </v-btn>\n    </v-toolbar>\n    <v-content>\n        <Navbar ref=\"Navbar\" />\n        \n        <v-alert :value=\"true\" type=\"error\" v-if=\"offline\" icon=\"cloud_off\" dismissible>You are offline. Functionality may be limited.</v-alert>\n        <router-view />\n    </v-content>\n</v-app>\n</template>\n\n<script>\nimport Product from \"./components/Product\";\nimport Post from \"./components/Post\";\nimport Navbar from \"./components/Navbar\";\n\nimport\n{\n    MagentoAPIService\n}\nfrom \"./services/MagentoAPIService\";\nimport\n{\n    FirebaseService\n}\nfrom \"./services/FirebaseService\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport * as localForage from \"localforage\";\nimport axios from \"axios\";\nimport \"./env.js\";\nimport\n{\n    ServiceWorkerLib\n}\nfrom \"./modules/ServiceWorkerLib.ts\";\n\nexport default\n{\n    name: \"App\",\n    components:\n    {\n        Product,\n        Post,\n        Navbar: Navbar\n    },\n    data()\n    {\n        return {\n            pageTitle: \"Home\",\n            firebase:\n            {\n                config:\n                {\n                    apiKey: \"AIzaSyAyGInviSJMCyZV_XHLIRa8fKAt-wsaAJA\",\n                    authDomain: \"pwademo-763.firebaseapp.com\",\n                    databaseURL: \"https://pwademo-763.firebaseio.com\",\n                    projectId: \"pwademo-763\",\n                    storageBucket: \"pwademo-763.appspot.com\",\n                    messagingSenderId: \"857384407396\"\n                },\n                messaging: null,\n                token: null\n            },\n            swLib: null,\n            registration: null,\n            serviceWorker: null,\n            service_worker:\n            {\n                refreshing: false,\n                reloadRequested: false\n            },\n            lf: null,\n            currentWorker: null,\n            newWorker: null,\n            drawer: \"\",\n            offline: !navigator.onLine,\n            pwaPrompt: null,\n            showPWAInstall: false,\n            installed: false,\n            showNotifications: true\n        };\n    },\n    computed:\n    {\n        posts: function ()\n        {\n            let posts = this.$store.getters[\"posts/allPosts\"];\n            // console.log(\"All Posts: \", posts);\n            return posts;\n        },\n        products: function ()\n        {\n            let products = this.$store.getters[\"products/allProducts\"];\n            // console.log(\"All Posts: \", posts);\n            return products;\n        },\n        firebase_token()\n        {}\n    },\n    async created()\n    {\n        this.pageTitle = this.$route.name;\n        localForage\n            .setDriver([\n                localForage.INDEXEDDB,\n                localForage.WEBSQL,\n                localForage.LOCALSTORAGE\n            ])\n            .then(function ()\n            {\n                localForage.config(\n                {\n                    name: \"Alessio\",\n                    version: 1.0,\n                    size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n                    storeName: \"lf2\", // Should be alphanumeric, with underscores.\n                    description: \"some description\"\n                });\n            });\n\n        this.lf = localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n        this.lf.setItem(\"test\", \"kqsdjmqkdfj\");\n\n        this.sw();\n        // this.firebaseNotificationsHandler();\n        window.addEventListener(\"online\", () =>\n        {\n            this._isOffline(false);\n        });\n        window.addEventListener(\"offline\", () =>\n        {\n            this._isOffline(true);\n        });\n    },\n    watch:\n    {\n        async $route(to, from)\n        {\n            const THIS = this;\n            let pageURL = this.$route.path;\n            let pageTitle = this.$route.name;\n            fetch(pageURL)\n                .then(resp => console.log(\"Background fetched: \", pageURL))\n                .catch(err => console.error(err));\n            if (pageTitle) this.pageTitle = pageTitle;\n            else\n            {\n                pageTitle = window.location.pathname;\n                if (pageTitle.startsWith(\"/\")) pageTitle = pageTitle.slice(1);\n                let title = pageTitle.split(\"/\");\n                if (title[0] === \"category\") title[0] = \"Category: \";\n                this.pageTitle = title[0] + title[1];\n            }\n        }\n    },\n    methods:\n    {\n        _isOffline(value)\n        {\n            this.offline = value;\n        },\n        _testMethod()\n        {\n            this.send_msg_to_sw_with_response(\n            {\n                action: \"SW\"\n            }).then(m => console.log(m));\n        },\n        callChild()\n        {\n            // this.bus.$emit('toggleNavbar');\n            this.$refs.Navbar._toggleNavbar();\n        },\n        _firebaseInit()\n        {\n            firebase.initializeApp(this.firebase.config);\n            this.firebase.messaging = firebase.messaging();\n            this.firebase.messaging.usePublicVapidKey(\n                \"BHEX_KV05JO3refzgJbNXaXObnSiCb2kjx1rOsLWhMon4dea2ddfiYD0iLBHm6DsQkVp8sCLr2Ypuuz6haDnOzo\"\n            );\n        },\n        _firebaseGetToken()\n        {\n            const THIS = this;\n            return THIS.firebase.messaging\n                .getToken()\n                .then(function (currentToken)\n                {\n                    if (currentToken)\n                    {\n                        THIS.firebase.token = currentToken;\n                        THIS.lf\n                            .setItem(\"token\", currentToken)\n                            .then(value =>\n                            {\n                                // console.log(\"LocalForage: \", value)\n                            })\n                            .catch(error =>\n                            {\n                                console.error(\"LocalForage: \", error);\n                            });\n                        // console.log(\"TOKEN: \", currentToken);\n                        currentToken;\n                    }\n                    else\n                    {\n                        console.log(\n                            \"No Instance ID token available. Request permission to generate one.\"\n                        );\n                    }\n                })\n                .catch(function (err)\n                {\n                    console.log(\"An error occurred while retrieving token. \", err);\n                    // setTokenSentToServer(false);\n                });\n        },\n        _firebaseRequestPermission()\n        {\n            const THIS = this;\n            this.firebase.messaging\n                .requestPermission()\n                .then(() =>\n                {\n                    // console.log('Notification permission granted.');\n                    this._firebaseGetToken().then(response =>\n                    {\n                        // let payload = {\n                        //     \t   \"to\": THIS.firebase.token,\n                        //         \"collapse_key\": \"type_a\",\n                        //         \"notification\":\n                        //         {\n                        //             \"title\": \"payload.title\",\n                        //             \"body\": \"payload.body\",\n                        //             \"icon\": \"payload.icon\",\n                        //             \"click_action\": \"payload.action\"\n                        //         },\n                        //         \"data\":\n                        //         {\n                        //             \"shown\": false\n                        //         }\n                        // };\n                        // FirebaseService.sendNotificationToSelf(payload)\n                    });\n                })\n                .catch(err =>\n                {\n                    console.log(\"Unable to get permission to notify.\", err);\n                });\n        },\n        firebaseNotificationsHandler()\n        {\n            const THIS = this;\n            this._firebaseInit();\n            this._firebaseRequestPermission();\n\n            // -----------------------------------------------------------------------------------------------------\n            // Event listeners\n\n            THIS.firebase.messaging.onTokenRefresh(() =>\n            {\n                this._firebaseGetToken();\n                console.log(\"TOKEN REFRESHED: \", THIS.firebase.token);\n            });\n\n            THIS.firebase.messaging.onMessage(payload =>\n            {\n                console.log(\"Message received. \", payload);\n                if (Notification.permission === \"granted\")\n                {\n                    const notification = new Notification(payload.notification.title,\n                    {\n                        icon: payload.notification.icon,\n                        body: payload.notification.body\n                    });\n                    notification.onclick = function ()\n                    {\n                        console.log(\"NOTIFCATION CLICK\");\n                        window.open(payload.notification.click_action, \"_blank\");\n                    };\n                    return notification;\n                }\n            });\n        },\n        send_msg_to_sw_with_response(msg)\n        {\n            return new Promise(function (resolve, reject)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    if (event.data.error)\n                    {\n                        reject(event.data.error);\n                    }\n                    else\n                    {\n                        resolve(event.data);\n                    }\n                };\n\n                navigator.serviceWorker.controller.postMessage(msg, [\n                    messageChannel.port2\n                ]);\n            });\n        },\n        pp(sw, msg)\n        {\n            return new Promise(function (resolve, reject)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    if (event.data.error)\n                    {\n                        reject(event.data.error);\n                    }\n                    else\n                    {\n                        resolve(event.data);\n                    }\n                };\n\n                sw.postMessage(msg, [messageChannel.port2]);\n            });\n        },\n        send_message_to_sw(msg)\n        {\n            if (\"serviceWorker\" in navigator)\n            {\n                // const currentWorker = this.swLib.getCurrentWorker();\n                let cookie = `Type=${msg}`;\n                this._setCookie(\"Type\", msg);\n                this.sw.postMessage(\n                {\n                    dev_comm: true,\n                    cookie: cookie\n                });\n            }\n        },\n        request_from_sw()\n        {\n            let request = new Request(\"/update.js\");\n            const requestOptions = {\n                method: \"GET\"\n            };\n            return fetch(request, requestOptions)\n                .then(response =>\n                {\n                    return {\n                        request: request,\n                        response: response\n                    };\n                })\n                .catch(error =>\n                {\n                    console.error(error);\n                    console.error(JSON.stringify(error));\n                    return {\n                        request: request,\n                        response: response\n                    };\n                });\n        },\n        send_new_sw()\n        {\n            if (this.newWorker)\n                this.newWorker.postMessage(\n                {\n                    action: \"skipWaiting\"\n                });\n        },\n        sw()\n        {\n            window.addEventListener(\"load\", async () =>\n            {\n                this.registration = await navigator.serviceWorker\n                    .register(\"/sw.js\")\n                    .catch(error => console.error(`registration failed: `, error));\n                this.serviceWorker = this.registration.active;\n                // let reg = await this.swLib.register()\n                // this.sw = await this.swLib.getCurrentWorker();\n                // console.log(\"REGISTRATION: \", this.swLib);\n                window.addEventListener(\"newSW\", () =>\n                {\n                    console.log(\"newSW arrived\");\n                });\n            });\n            /* navigator.serviceWorker.register(\"/sw.js\").then(registration =>\n                          {\n                              this.serviceWorker = registration.active;\n                          }); */\n        },\n        _navigateTo(url, buh)\n        {\n            this.lf.setItem(\"buh\", buh).catch(error =>\n            {\n                console.error(error);\n            });\n            window.location = url;\n        },\n        _setCookie(key, value)\n        {\n            let parsedCookies = this._parseDocumentCookies();\n            parsedCookies = this._setValueOnParsedCookies(parsedCookies, key, value);\n            let stringifiedCookies = this._stringifyParsedCookies(parsedCookies);\n            document.cookie = `${key}=${value}`;\n\n            if (this.registration.active)\n            {\n                this.registration.active.postMessage(\n                {\n                    action: \"setCookies\",\n                    cookies: parsedCookies\n                });\n            }\n        },\n        _deteleCookie(key)\n        {\n            document.cookie = `${key}= ; expires = Thu, 01 Jan 1970 00:00:00 GMT`;\n        },\n        _parseDocumentCookies()\n        {\n            let docCookies = document.cookie;\n            if (docCookies === \"\") return [];\n            docCookies = document.cookie.split(\";\");\n            let parsedCookies = [];\n            for (let docCookie of docCookies)\n            {\n                let parsedCookie = docCookie.split(\"=\");\n                parsedCookies.push(parsedCookie);\n            }\n            return parsedCookies;\n        },\n        _setValueOnParsedCookies(parsedCookies, key, value)\n        {\n            let valueSet = false;\n            for (let i = 0; i < parsedCookies.length; ++i)\n            {\n                if (parsedCookies[i][0] === key)\n                {\n                    parsedCookies[i][1] = value;\n                    valueSet = true;\n                }\n            }\n            if (!valueSet) parsedCookies.push([key, value]);\n            return parsedCookies;\n        },\n        _stringifyParsedCookies(parsedCookies)\n        {\n            let stringifiedCookies = \"\";\n            for (let cookie of parsedCookies)\n            {\n                stringifiedCookies += `${cookie[0]}=${cookie[1]};`;\n            }\n            return stringifiedCookies;\n        },\n        myfetch(p)\n        {\n            let request = new Request(\"https://pwa.local:8080/api/products/\");\n\n            // request.headers.append(\"X-X\", p);\n            fetch(request,\n            {\n                credentials: \"include\"\n            }).catch(err => console.error(err));\n            // fetch(request);\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\">\n// Overwrite v-alert icon color\n.v-alert .v-alert__icon.v-icon,\n.v-alert__dismissible .v-icon {\n    color: white !important;\n}\n</style>\n"]}]}