{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ale/Documents/Bachproef/pwa-3/src/views/Update.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/views/Update.vue","mtime":1560024916835},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport\n{\n    FirebaseService\n}\nfrom \"../services/FirebaseService\";\nimport * as localForage from \"localforage\";\n\nexport default\n{\n    name: \"Update\",\n    data()\n    {\n        return {\n            service_worker: null,\n            newWorker: null,\n            pageTitle: \"Update\",\n            swName: \"sw.js\",\n            lf: null,\n            firebaseToken: null,\n            update: false,\n            multiclient: false,\n            multiClientUpdate: false,\n            refreshing: false\n        };\n    },\n    computed:\n    {},\n    async created()\n    {\n        console.log(\"Creating Update, \", window.location.pathname);\n        this.lf = await localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n\n        let key = await this.lf.getItem(\"VersionSW\");\n        if (key == null) this.lf.setItem(\"VersionSW\", 0);\n        this.install_sw();\n        setTimeout(() =>\n        {\n            let img = document.createElement(\"img\");\n            img.src = \"/img/horse.png\";\n            img.style = \"max-width: 100%; height: 250px;\";\n            if (document.getElementById(\"imgElement\"))\n            {\n                document.getElementById(\"imgElement\").appendChild(img);\n            }\n        }, 2500);\n    },\n    methods:\n    {\n        async install_sw()\n        {\n            const pathName = window.location.pathname;\n            // console.log(pathName);\n            if (pathName === \"/\") return;\n            let key = await this.lf.getItem(\"VersionSW\");\n            if (key == null) key = 0;\n            if (pathName === \"/update-without-skip-and-claim\")\n            {\n                this.pageTitle = \"Default update\";\n                if (key === 0) this.swName = \"/sw-without-skip-and-claim.js\";\n                else this.swName = \"/sw-without-skip-and-claim-2.js\";\n            }\n            else if (pathName === \"/update-with-skip-no-claim\")\n            {\n                this.pageTitle = \"Forced update\";\n                if (key === 0) this.swName = \"/sw-with-skip-no-claim.js\";\n                else this.swName = \"/sw-with-skip-no-claim-2.js\";\n            }\n            else if (pathName === \"/update-with-skip-and-claim\")\n            {\n                this.pageTitle = \"Forced update & immediate control\";\n                if (key === 0) this.swName = \"/sw-with-skip-and-claim.js\";\n                else this.swName = \"/sw-with-skip-and-claim-2.js\";\n            }\n            else if (pathName === \"/single-client-update\")\n            {\n                this.pageTitle = \"Single Client Update\";\n                if (key === 0) this.swName = \"/sw-single-client-update.js\";\n                else this.swName = \"/sw-single-client-update-2.js\";\n            }\n            else if (pathName === \"/multi-client-update\")\n            {\n                this.pageTitle = \"Multi Client Update\";\n                this.multiclient = true;\n                if (key === 0) this.swName = \"/sw-multi-client-update.js\";\n                else this.swName = \"/sw-multi-client-update-2.js\";\n            }\n            navigator.serviceWorker.register(this.swName,\n            {\n                scope: pathName\n            }).then(registration =>\n                {\n                    this.registration = registration;\n                    this._updateListener();\n\n                    let THIS = this;\n                    navigator.serviceWorker.addEventListener('controllerchange',\n                        function ()\n                        {\n                            if (THIS.refreshing) return;\n                            THIS.refreshing = true;\n                            window.location.reload();\n                        }\n                    );\n                },\n                err =>\n                {\n                    console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                }\n            );\n        },\n        _updateListener()\n        {\n            // Service worker has installed in the background during a previous page load\n            if (this.registration.waiting && this.registration.active)\n            {\n                this._setUpdateStatus(true);\n                this.newWorker = this.registration.waiting;\n            }\n            else\n            {\n                // Monitor service worker for new version\n                this.registration.addEventListener(\"updatefound\", () =>\n                {\n                    this.newWorker = this.registration.installing;\n\n                    // Monitor controllerchange for when a new version takes over\n                    this.registration.addEventListener('controllerchange', () =>\n                    {\n                        // Remove update available when new service worker activates\n                        this._setUpdateStatus(false);\n                    });\n\n                    // Monitor new service worker for statechanges\n                    this.newWorker.addEventListener(\"statechange\", () =>\n                    {\n                        // Has service worker state changed?\n                        switch (this.newWorker.state)\n                        {\n                            case \"installed\":\n                                // There is a new service worker available, show the notification\n                                console.log(\"SW DETECTING UPDATE 2\");\n                                this._setUpdateStatus(true);\n                                break;\n                            case \"activated\":\n                                // There is a new service worker available, show the notification\n                                if (navigator.serviceWorker.controller)\n                                {\n                                    console.log(\"SW ACTIVATED\");\n                                    // this._setUpdateStatus(false);\n                                }\n                                if (this.lf.getItem(\"updating\"))\n                                {\n                                    // window.location.reload();\n                                }\n                                break;\n                        }\n                    });\n                });\n            }\n        },\n        unregister_sw()\n        {\n            this.registration.unregister().then(() =>\n            {\n                console.log(\"Unregister\");\n            });\n        },\n        async toggleSW()\n        {\n            this.lf.setItem(\"UAV\", true);\n            let key = await this.lf.getItem(\"VersionSW\");\n            if (key === 1 || key == null)\n            {\n                this.lf.setItem(\"VersionSW\", 0);\n            }\n            else\n            {\n                this.lf.setItem(\"VersionSW\", 1);\n            }\n            this.registration.update();\n        },\n        request_from_sw()\n        {\n            const pathName = window.location.pathname;\n            this.registration.update();\n            let request = new Request(`https://pwa.local:8080/${this.swName}`);\n            const requestOptions = {\n                method: \"GET\"\n            };\n            return fetch(request, requestOptions)\n                .then(response =>\n                {\n                    navigator.serviceWorker\n                        .register(this.swName,\n                        {\n                            scope: pathName\n                        })\n                        .then(\n                            registration =>\n                            {\n                                this.registration = registration;\n                            },\n                            err =>\n                            {\n                                console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                            }\n                        )\n                        .then(() =>\n                        {\n                            this.service_worker = navigator.serviceWorker;\n                            return navigator.serviceWorker.ready;\n                        });\n                    return response;\n                })\n\n                .catch(error =>\n                {\n                    console.error(error);\n                    console.error(JSON.stringify(error));\n                    return {\n                        request: request,\n                        response: response\n                    };\n                });\n        },\n        send_new_sw()\n        {\n            this.$emit(\"updateRequest\");\n        },\n\n        update_sw()\n        {\n            this.newWorker.postMessage(\n            {\n                action: 'skipWaiting'\n            });\n        },\n        getSWClients()\n        {\n            if (navigator.serviceWorker.controller)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    console.log(\"Response from the SW : \", event.data.message);\n                };\n                console.log(\"Sending message to the service worker\");\n                navigator.serviceWorker.controller.postMessage(\n                    {\n                        command: \"twoWayCommunication\",\n                        message: \"Hi, SW\"\n                    },\n                    [messageChannel.port2]\n                );\n            }\n            else\n            {\n                console.log(\"No active ServiceWorker\");\n            }\n        },\n        _navigateTo(url)\n        {\n            window.location = url;\n        },\n        _setUpdateStatus(status)\n        {\n            if (this.registration.active)\n            {\n                this.update = status;\n                if (this.multiclient)\n                    this.multiClientUpdate = status;\n            }\n        }\n    }\n};\n",{"version":3,"sources":["Update.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Update.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<div style=\"margin: 0 auto; padding: 1rem;\">\n    <h1>{{ pageTitle }}</h1>\n\n    <h2 style=\"text-align: right\">\n        <div v-if=\"update\" style=\"color: dodgerblue;\">\n            <v-icon style=\"color: dodgerblue;padding-right: 1rem;\">update</v-icon>\n            Update available\n        </div>\n        <div v-if=\"!update\" style>\n            <v-icon style=\"padding-right: 1rem;\">update</v-icon>No update available\n        </div>\n    </h2>\n    <div style=\"display:block;text-align: center\">\n        <img\n        src=\"/img/horse.png\"\n        style=\"display:block; height: 250px; max-width: 100%; margin: 0 auto\"\n      >\n        <div id=\"imgElement\" style=\"display:block; height: 250px; max-width: 100%;\"></div>\n    </div>\n    <div style=\"width: 100%;text-align: center;\">\n        <v-btn round dark color=\"teal\" v-on:click=\"toggleSW()\">Update SW</v-btn>\n        <v-btn round dark color=\"teal\" v-on:click=\"unregister_sw()\">Unregister SW</v-btn>\n    </div>\n    <v-snackbar v-model=\"multiClientUpdate\" :timeout=\"0\" :vertical=true>\n        A new update is available. Please update.\n        <v-btn dark flat @click=\"update_sw\">\n            Update\n        </v-btn>\n        <v-btn dark flat @click=\"multiClientUpdate = false\">\n            Close\n        </v-btn>\n    </v-snackbar>\n</div>\n</template>\n\n<script>\nimport\n{\n    FirebaseService\n}\nfrom \"../services/FirebaseService\";\nimport * as localForage from \"localforage\";\n\nexport default\n{\n    name: \"Update\",\n    data()\n    {\n        return {\n            service_worker: null,\n            newWorker: null,\n            pageTitle: \"Update\",\n            swName: \"sw.js\",\n            lf: null,\n            firebaseToken: null,\n            update: false,\n            multiclient: false,\n            multiClientUpdate: false,\n            refreshing: false\n        };\n    },\n    computed:\n    {},\n    async created()\n    {\n        console.log(\"Creating Update, \", window.location.pathname);\n        this.lf = await localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n\n        let key = await this.lf.getItem(\"VersionSW\");\n        if (key == null) this.lf.setItem(\"VersionSW\", 0);\n        this.install_sw();\n        setTimeout(() =>\n        {\n            let img = document.createElement(\"img\");\n            img.src = \"/img/horse.png\";\n            img.style = \"max-width: 100%; height: 250px;\";\n            if (document.getElementById(\"imgElement\"))\n            {\n                document.getElementById(\"imgElement\").appendChild(img);\n            }\n        }, 2500);\n    },\n    methods:\n    {\n        async install_sw()\n        {\n            const pathName = window.location.pathname;\n            // console.log(pathName);\n            if (pathName === \"/\") return;\n            let key = await this.lf.getItem(\"VersionSW\");\n            if (key == null) key = 0;\n            if (pathName === \"/update-without-skip-and-claim\")\n            {\n                this.pageTitle = \"Default update\";\n                if (key === 0) this.swName = \"/sw-without-skip-and-claim.js\";\n                else this.swName = \"/sw-without-skip-and-claim-2.js\";\n            }\n            else if (pathName === \"/update-with-skip-no-claim\")\n            {\n                this.pageTitle = \"Forced update\";\n                if (key === 0) this.swName = \"/sw-with-skip-no-claim.js\";\n                else this.swName = \"/sw-with-skip-no-claim-2.js\";\n            }\n            else if (pathName === \"/update-with-skip-and-claim\")\n            {\n                this.pageTitle = \"Forced update & immediate control\";\n                if (key === 0) this.swName = \"/sw-with-skip-and-claim.js\";\n                else this.swName = \"/sw-with-skip-and-claim-2.js\";\n            }\n            else if (pathName === \"/single-client-update\")\n            {\n                this.pageTitle = \"Single Client Update\";\n                if (key === 0) this.swName = \"/sw-single-client-update.js\";\n                else this.swName = \"/sw-single-client-update-2.js\";\n            }\n            else if (pathName === \"/multi-client-update\")\n            {\n                this.pageTitle = \"Multi Client Update\";\n                this.multiclient = true;\n                if (key === 0) this.swName = \"/sw-multi-client-update.js\";\n                else this.swName = \"/sw-multi-client-update-2.js\";\n            }\n            navigator.serviceWorker.register(this.swName,\n            {\n                scope: pathName\n            }).then(registration =>\n                {\n                    this.registration = registration;\n                    this._updateListener();\n\n                    let THIS = this;\n                    navigator.serviceWorker.addEventListener('controllerchange',\n                        function ()\n                        {\n                            if (THIS.refreshing) return;\n                            THIS.refreshing = true;\n                            window.location.reload();\n                        }\n                    );\n                },\n                err =>\n                {\n                    console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                }\n            );\n        },\n        _updateListener()\n        {\n            // Service worker has installed in the background during a previous page load\n            if (this.registration.waiting && this.registration.active)\n            {\n                this._setUpdateStatus(true);\n                this.newWorker = this.registration.waiting;\n            }\n            else\n            {\n                // Monitor service worker for new version\n                this.registration.addEventListener(\"updatefound\", () =>\n                {\n                    this.newWorker = this.registration.installing;\n\n                    // Monitor controllerchange for when a new version takes over\n                    this.registration.addEventListener('controllerchange', () =>\n                    {\n                        // Remove update available when new service worker activates\n                        this._setUpdateStatus(false);\n                    });\n\n                    // Monitor new service worker for statechanges\n                    this.newWorker.addEventListener(\"statechange\", () =>\n                    {\n                        // Has service worker state changed?\n                        switch (this.newWorker.state)\n                        {\n                            case \"installed\":\n                                // There is a new service worker available, show the notification\n                                console.log(\"SW DETECTING UPDATE 2\");\n                                this._setUpdateStatus(true);\n                                break;\n                            case \"activated\":\n                                // There is a new service worker available, show the notification\n                                if (navigator.serviceWorker.controller)\n                                {\n                                    console.log(\"SW ACTIVATED\");\n                                    // this._setUpdateStatus(false);\n                                }\n                                if (this.lf.getItem(\"updating\"))\n                                {\n                                    // window.location.reload();\n                                }\n                                break;\n                        }\n                    });\n                });\n            }\n        },\n        unregister_sw()\n        {\n            this.registration.unregister().then(() =>\n            {\n                console.log(\"Unregister\");\n            });\n        },\n        async toggleSW()\n        {\n            this.lf.setItem(\"UAV\", true);\n            let key = await this.lf.getItem(\"VersionSW\");\n            if (key === 1 || key == null)\n            {\n                this.lf.setItem(\"VersionSW\", 0);\n            }\n            else\n            {\n                this.lf.setItem(\"VersionSW\", 1);\n            }\n            this.registration.update();\n        },\n        request_from_sw()\n        {\n            const pathName = window.location.pathname;\n            this.registration.update();\n            let request = new Request(`https://pwa.local:8080/${this.swName}`);\n            const requestOptions = {\n                method: \"GET\"\n            };\n            return fetch(request, requestOptions)\n                .then(response =>\n                {\n                    navigator.serviceWorker\n                        .register(this.swName,\n                        {\n                            scope: pathName\n                        })\n                        .then(\n                            registration =>\n                            {\n                                this.registration = registration;\n                            },\n                            err =>\n                            {\n                                console.log(\"SW UPDATE_DEMO FAILED: \", err);\n                            }\n                        )\n                        .then(() =>\n                        {\n                            this.service_worker = navigator.serviceWorker;\n                            return navigator.serviceWorker.ready;\n                        });\n                    return response;\n                })\n\n                .catch(error =>\n                {\n                    console.error(error);\n                    console.error(JSON.stringify(error));\n                    return {\n                        request: request,\n                        response: response\n                    };\n                });\n        },\n        send_new_sw()\n        {\n            this.$emit(\"updateRequest\");\n        },\n\n        update_sw()\n        {\n            this.newWorker.postMessage(\n            {\n                action: 'skipWaiting'\n            });\n        },\n        getSWClients()\n        {\n            if (navigator.serviceWorker.controller)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    console.log(\"Response from the SW : \", event.data.message);\n                };\n                console.log(\"Sending message to the service worker\");\n                navigator.serviceWorker.controller.postMessage(\n                    {\n                        command: \"twoWayCommunication\",\n                        message: \"Hi, SW\"\n                    },\n                    [messageChannel.port2]\n                );\n            }\n            else\n            {\n                console.log(\"No active ServiceWorker\");\n            }\n        },\n        _navigateTo(url)\n        {\n            window.location = url;\n        },\n        _setUpdateStatus(status)\n        {\n            if (this.registration.active)\n            {\n                this.update = status;\n                if (this.multiclient)\n                    this.multiClientUpdate = status;\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n</style>\n"]}]}