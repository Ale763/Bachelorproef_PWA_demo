{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ale/Documents/Bachproef/pwa-3/src/views/Settings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/views/Settings.vue","mtime":1560603414420},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport localForage from \"localforage\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nexport default\n{\n    name: 'Settings',\n    data()\n    {\n        return {\n            strategy: \"none\",\n            usergroup: \"none\",\n            notificationConfig: \"default\",\n            flag: false,\n            sw: null,\n            registration: null,\n            firebase:\n            {\n                config:\n                {\n                    apiKey: \"AIzaSyAyGInviSJMCyZV_XHLIRa8fKAt-wsaAJA\",\n                    authDomain: \"pwademo-763.firebaseapp.com\",\n                    databaseURL: \"https://pwademo-763.firebaseio.com\",\n                    projectId: \"pwademo-763\",\n                    storageBucket: \"pwademo-763.appspot.com\",\n                    messagingSenderId: \"857384407396\"\n                },\n                messaging: null,\n                token: null\n            },\n            showNotificationPrompt: Notification.permission !== 'granted',\n            notificationSubscribed: false,\n            pwa:\n            {\n                installed: false,\n                showInstallButton: false,\n                promptEvent: null\n\n            }\n        }\n    },\n    async created()\n    {\n        this.pageTitle = this.$route.name;\n        localForage\n            .setDriver([\n                localForage.INDEXEDDB,\n                localForage.WEBSQL,\n                localForage.LOCALSTORAGE\n            ])\n            .then(function ()\n            {\n                localForage.config(\n                {\n                    name: \"Alessio\",\n                    version: 1.0,\n                    size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n                    storeName: \"lf2\", // Should be alphanumeric, with underscores.\n                    description: \"some description\"\n                });\n            });\n\n        this.lf = localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n\n        window.addEventListener(\"change\", (event) =>\n        {\n            console.log(\"productCachePolicy: \", event);\n        });\n\n        window.addEventListener('load', async () =>\n        {\n            this.registration = await navigator.serviceWorker.register(\"/sw.js\")\n                .then(reg =>\n                {\n                    this.flag = true;\n                    this.sw = reg.active;\n                    return reg;\n                })\n                .catch((error) => console.error(`registration failed: `, error));\n        });\n        this.initStrategy();\n        this.initUsergroupCookie();\n        this.initNotificationConfigCookie();\n        this.firebaseNotificationsHandler();\n\n        let THIS = this;\n        window.addEventListener(\"beforeinstallprompt\", function (e)\n        {\n            // Prevent Chrome 67 and earlier from automatically showing the prompt\n            e.preventDefault();\n            // Stash the event so it can be triggered later.\n            THIS.pwa.promptEvent = e;\n\n            THIS.pwa.showInstallButton = true;\n        });\n\n        window.addEventListener('appinstalled', (evt) =>\n        {\n            this.pwa.installed = true;\n            console.log('👍', 'appinstalled', event);\n            this.showNotificationPrompt = true;\n        });\n    },\n    methods:\n    {\n        installPWA()\n        {\n            this.pwa.promptEvent.prompt();\n        },\n        async sendPost(url)\n        {\n            const rawResponse = await fetch(url,\n            {\n                method: 'POST',\n                credentials: 'omit',\n            });\n        },\n        async sendToken(token)\n        {\n            const rawResponse = await fetch('/api/save_token/',\n            {\n                method: 'POST',\n                credentials: 'omit',\n                headers:\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                {\n                    \"token\": token\n                })\n            });\n        },\n        async sendMode(mode)\n        {\n            const rawResponse = await fetch('/api/set_mode/',\n            {\n                method: 'POST',\n                credentials: 'omit',\n                headers:\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                {\n                    \"mode\": mode\n                })\n            });\n            // const content = await rawResponse.json();\n        },\n        async setStrategy()\n        {\n            this.registration.active.postMessage(\n            {\n                action: 'updateProductCachePolicy',\n                policy: this.strategy\n            });\n        },\n        async setUserCookie()\n        {\n            if (this.usergroup === '1' || this.usergroup === '2')\n            {\n                this._setCookie(\"User\", this.usergroup);\n            }\n            else\n            {\n                this._deteleCookie(\"User\");\n            }\n        },\n        async setNotificationConfigCookie()\n        {\n            if (this.notificationConfig === 'only_orders' || this.notificationConfig === 'none')\n            {\n                this._setCookie(\"notificationConfig\", this.notificationConfig);\n            }\n            else\n            {\n                this.notificationConfig = \"default\"\n                this._setCookie(\"notificationConfig\", this.notificationConfig);\n            }\n            this.sendMode(this.notificationConfig)\n        },\n        async initStrategy()\n        {\n            let response = await fetch(\"/sw/productCachePolicy\").catch(err =>\n            {\n                return null;\n            });\n            let productCachePolicy = \"none\";\n            if (response != null)\n                productCachePolicy = await response.json().then(data =>\n                {\n                    return data.policy;\n                }).catch(err =>\n                {\n                    return \"none\";\n                });\n            this.strategy = productCachePolicy;\n\n        },\n        initUsergroupCookie()\n        {\n            let usergroupCookie = this._getCookieValue('User');\n            if (usergroupCookie)\n                this.usergroup = usergroupCookie;\n            else\n                this.usergroup = \"none\"\n        },\n        initNotificationConfigCookie()\n        {\n            let notificationConfigCookie = this._getCookieValue('notificationConfig');\n            if (notificationConfigCookie = null) notificationConfigCookie = 'default';\n\n\n            this.notificationConfig = notificationConfigCookie;\n\n            this.setNotificationConfigCookie()\n\n            let subscribed = this._getCookieValue(\"notificationSubscribed\");\n            if (subscribed == null) subscribed = false;\n            this.notificationSubscribed = (Notification.permission === 'granted');\n            if (window.matchMedia('(display-mode: standalone)').matches)\n            {\n                this.pwa.installed = true;\n            }\n            this.showNotificationPrompt = Notification.permission !== 'granted' && this.pwa.installed;\n        },\n        async _getStrategy()\n        {\n            if (this.registration.active)\n            {\n                let response = await fetch(\"/sw/productCachePolicy\").catch(err =>\n                {\n                    return null;\n                });\n                let productCachePolicy = \"none\";\n                if (response != null)\n                    productCachePolicy = await response.json().then(data =>\n                    {\n                        return data.policy;\n                    }).catch(err =>\n                    {\n                        return \"none\";\n                    });\n                return productCachePolicy;\n            }\n            return \"none\";\n        },\n        _setCookie(key, value)\n        {\n            let parsedCookies = this._parseDocumentCookies();\n            parsedCookies = this._setValueOnParsedCookies(parsedCookies, key, value);\n            let stringifiedCookies = this._stringifyParsedCookies(parsedCookies);\n            let cookie = `${key}=${value}`\n            document.cookie = cookie;\n\n            if (key !== \"User\")\n                return\n            if (this.registration.active)\n            {\n                this.registration.active.postMessage(\n                {\n                    action: 'setUserCookie',\n                    cookies: cookie\n                });\n            }\n        },\n        _getCookieValue(key)\n        {\n            let parsedCookies = this._parseDocumentCookies();\n            for (let cookie of parsedCookies)\n            {\n                if (cookie[0] === key)\n                    return cookie[1];\n            }\n            return null\n        },\n        _deteleCookie(key)\n        {\n            document.cookie = `${key}= ; expires = Thu, 01 Jan 1970 00:00:00 GMT`\n        },\n        _parseDocumentCookies()\n        {\n            let docCookies = document.cookie;\n            if (docCookies === \"\")\n                return []\n            docCookies = docCookies.split('; ');\n            let parsedCookies = [];\n            for (let docCookie of docCookies)\n            {\n                let parsedCookie = docCookie.split('=');\n                parsedCookies.push(parsedCookie);\n            }\n            return parsedCookies;\n        },\n        _setValueOnParsedCookies(parsedCookies, key, value)\n        {\n            let valueSet = false;\n            for (let i = 0; i < parsedCookies.length; ++i)\n            {\n                if (parsedCookies[i][0] === key)\n                {\n                    parsedCookies[i][1] = value\n                    valueSet = true;\n                }\n            }\n            if (!valueSet)\n                parsedCookies.push([key, value]);\n            return parsedCookies;\n        },\n        _stringifyParsedCookies(parsedCookies)\n        {\n            let stringifiedCookies = \"\";\n            for (let cookie of parsedCookies)\n            {\n                stringifiedCookies += `${cookie[0]}=${cookie[1]};`;\n            }\n            return stringifiedCookies;\n        },\n        _firebaseInit()\n        {\n            firebase.initializeApp(this.firebase.config);\n            this.firebase.messaging = firebase.messaging();\n            this.firebase.messaging.usePublicVapidKey(\n                \"BHEX_KV05JO3refzgJbNXaXObnSiCb2kjx1rOsLWhMon4dea2ddfiYD0iLBHm6DsQkVp8sCLr2Ypuuz6haDnOzo\"\n            );\n            this._firebaseGetToken();\n        },\n        _firebaseGetToken()\n        {\n            const THIS = this;\n            return THIS.firebase.messaging\n                .getToken()\n                .then(function (currentToken)\n                {\n                    if (currentToken)\n                    {\n                        THIS.firebase.token = currentToken;\n                        THIS.notificationSubscribed = true;\n                        THIS.sendToken(currentToken)\n                        THIS.showNotificationPrompt = false\n                        THIS._setCookie(\"notificationSubscribed\", \"true\")\n                    }\n                    else\n                    {\n                        console.log(\n                            \"No Instance ID token available. Request permission to generate one.\"\n                        );\n                    }\n                })\n                .catch(function (err)\n                {\n                    console.log(\"An error occurred while retrieving token. \", err);\n                });\n        },\n        _firebaseRequestPermission()\n        {\n            const THIS = this;\n            this.firebase.messaging\n                .requestPermission()\n                .then(() =>\n                {\n                    // console.log('Notification permission granted.');\n                    this._firebaseGetToken().then(response =>\n                    {\n                        let notificationConfigCookie = THIS._getCookieValue('notificationConfig');\n                        if (notificationConfigCookie)\n                            THIS.notificationConfig = notificationConfigCookie;\n                        else\n                            THIS.notificationConfig = \"default\"\n                        // let payload = {\n                        //     \t   \"to\": THIS.firebase.token,\n                        //         \"collapse_key\": \"type_a\",\n                        //         \"notification\":\n                        //         {\n                        //             \"title\": \"payload.title\",\n                        //             \"body\": \"payload.body\",\n                        //             \"icon\": \"payload.icon\",\n                        //             \"click_action\": \"payload.action\"\n                        //         },\n                        //         \"data\":\n                        //         {\n                        //             \"shown\": false\n                        //         }\n                        // };\n                        // FirebaseService.sendNotificationToSelf(payload)\n\n                    });\n                })\n                .catch(err =>\n                {\n                    console.log(\"Unable to get permission to notify.\", err);\n                });\n        },\n        firebaseNotificationsHandler()\n        {\n            const THIS = this;\n            this._firebaseInit();\n            // this._firebaseRequestPermission();\n\n            // -----------------------------------------------------------------------------------------------------\n            // Event listeners\n\n            THIS.firebase.messaging.onTokenRefresh(() =>\n            {\n                this._firebaseGetToken();\n                console.log(\"TOKEN REFRESHED: \", THIS.firebase.token);\n            });\n\n            THIS.firebase.messaging.onMessage(payload =>\n            {\n                console.log(\"Message received. \", payload);\n                if (Notification.permission === \"granted\")\n                {\n                    const notification = new Notification(payload.notification.title,\n                    {\n                        icon: payload.notification.icon,\n                        body: payload.notification.body\n                    });\n                    notification.onclick = function ()\n                    {\n                        console.log(\"NOTIFCATION CLICK\");\n                        window.open(payload.notification.click_action, \"_blank\");\n                    };\n                    return notification;\n                }\n            });\n        },\n    }\n}\n",{"version":3,"sources":["Settings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Settings.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<div class=\"settings\">\n    <v-card v-if=\"flag\">\n        <v-card-text>\n            <div v-if=\"!notificationSubscribed\">\n                <v-btn color=\"\" @click=\"showNotificationPrompt = true\">\n                    <v-icon>notifications</v-icon>Subscribe to notifications\n                </v-btn>\n            </div>\n            <div v-if=\"pwa.showInstallButton\">\n                <v-btn color=\"\" @click=\"installPWA()\">\n                    <v-icon>get_app</v-icon>Install PWA\n                </v-btn>\n            </div>\n            <v-container fluid>\n                <v-layout column wrap>\n                    <v-flex xs12>\n                        <h2>Set cache strategy</h2>\n                    </v-flex>\n                    <v-flex xs12>\n                        <v-radio-group v-model=\"strategy\" :mandatory=\"false\" @change=\"setStrategy\">\n                            <v-radio label=\"None\" value=\"none\"></v-radio>\n                            <v-radio label=\"History\" value=\"history\"></v-radio>\n                            <v-radio label=\"Predictive\" value=\"predictive\"></v-radio>\n                        </v-radio-group>\n                    </v-flex>\n                </v-layout>\n            </v-container>\n            <v-container fluid>\n                <v-layout row wrap>\n                    <v-flex xs12>\n                        <h2>Set user group</h2>\n                    </v-flex>\n                    <v-flex xs12>\n                        <v-radio-group v-model=\"usergroup\" :mandatory=\"false\" @change=\"setUserCookie\">\n                            <v-radio label=\"Anonymous\" value=\"none\"></v-radio>\n                            <v-radio label=\"User 1\" value=\"1\"></v-radio>\n                            <v-radio label=\"User 2\" value=\"2\"></v-radio>\n                        </v-radio-group>\n                    </v-flex>\n                </v-layout>\n            </v-container>\n            <v-container fluid v-if=\"notificationSubscribed\">\n                <v-layout row wrap>\n                    <v-flex xs10>\n                        <h2>Configure notifications</h2>\n                    </v-flex>\n\n                    <v-flex xs12>\n                        <v-radio-group v-model=\"notificationConfig\" :mandatory=\"false\" @change=\"setNotificationConfigCookie\">\n                            <v-radio label=\"Default\" value=\"default\"></v-radio>\n                            <v-radio label=\"Only orders\" value=\"only_orders\"></v-radio>\n                            <v-radio label=\"None\" value=\"none\"></v-radio>\n                        </v-radio-group>\n                        <v-item-group multiple style=\"text-align:center;\">\n                            <h3>Send notifications</h3>\n                            <v-item>\n                                <v-btn color=\"info\" @click=\"sendPost('/api/send_order_notification/')\">Order</v-btn>\n                            </v-item>\n                            <v-item>\n                                <v-btn color=\"info\" @click=\"sendPost('/api/send_promo_notification/')\">Promo</v-btn>\n                            </v-item>\n                            <v-item>\n                                <v-btn color=\"info\" @click=\"sendPost('/api/send_promo_notification2/')\">Promo 2</v-btn>\n                            </v-item>\n                        </v-item-group>\n                    </v-flex>\n                </v-layout>\n            </v-container>\n\n            <v-snackbar v-model=\"showNotificationPrompt\" :timeout=\"0\" :vertical=\"true\">\n                Do you want to subscribe to push notifications to stay up to date?\n                <v-item-group multiple style=\"text-align:center;\">\n                    <v-item>\n                        <v-btn style=\"padding: 5px 10px;margin-top: 0;margin-right: 40px;\" color=\"info\" @click=\"_firebaseRequestPermission()\">Yes</v-btn>\n                    </v-item>\n                    <v-item>\n                        <v-btn style=\"padding: 5px 10px;margin-top: 0;margin-left: 40px;\" color=\"info\" @click=\"showNotificationPrompt = false\">No</v-btn>\n                    </v-item>\n                </v-item-group>\n            </v-snackbar>\n        </v-card-text>\n    </v-card>\n</div>\n</template>\n\n<script>\nimport localForage from \"localforage\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nexport default\n{\n    name: 'Settings',\n    data()\n    {\n        return {\n            strategy: \"none\",\n            usergroup: \"none\",\n            notificationConfig: \"default\",\n            flag: false,\n            sw: null,\n            registration: null,\n            firebase:\n            {\n                config:\n                {\n                    apiKey: \"AIzaSyAyGInviSJMCyZV_XHLIRa8fKAt-wsaAJA\",\n                    authDomain: \"pwademo-763.firebaseapp.com\",\n                    databaseURL: \"https://pwademo-763.firebaseio.com\",\n                    projectId: \"pwademo-763\",\n                    storageBucket: \"pwademo-763.appspot.com\",\n                    messagingSenderId: \"857384407396\"\n                },\n                messaging: null,\n                token: null\n            },\n            showNotificationPrompt: Notification.permission !== 'granted',\n            notificationSubscribed: false,\n            pwa:\n            {\n                installed: false,\n                showInstallButton: false,\n                promptEvent: null\n\n            }\n        }\n    },\n    async created()\n    {\n        this.pageTitle = this.$route.name;\n        localForage\n            .setDriver([\n                localForage.INDEXEDDB,\n                localForage.WEBSQL,\n                localForage.LOCALSTORAGE\n            ])\n            .then(function ()\n            {\n                localForage.config(\n                {\n                    name: \"Alessio\",\n                    version: 1.0,\n                    size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n                    storeName: \"lf2\", // Should be alphanumeric, with underscores.\n                    description: \"some description\"\n                });\n            });\n\n        this.lf = localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n\n        window.addEventListener(\"change\", (event) =>\n        {\n            console.log(\"productCachePolicy: \", event);\n        });\n\n        window.addEventListener('load', async () =>\n        {\n            this.registration = await navigator.serviceWorker.register(\"/sw.js\")\n                .then(reg =>\n                {\n                    this.flag = true;\n                    this.sw = reg.active;\n                    return reg;\n                })\n                .catch((error) => console.error(`registration failed: `, error));\n        });\n        this.initStrategy();\n        this.initUsergroupCookie();\n        this.initNotificationConfigCookie();\n        this.firebaseNotificationsHandler();\n\n        let THIS = this;\n        window.addEventListener(\"beforeinstallprompt\", function (e)\n        {\n            // Prevent Chrome 67 and earlier from automatically showing the prompt\n            e.preventDefault();\n            // Stash the event so it can be triggered later.\n            THIS.pwa.promptEvent = e;\n\n            THIS.pwa.showInstallButton = true;\n        });\n\n        window.addEventListener('appinstalled', (evt) =>\n        {\n            this.pwa.installed = true;\n            console.log('👍', 'appinstalled', event);\n            this.showNotificationPrompt = true;\n        });\n    },\n    methods:\n    {\n        installPWA()\n        {\n            this.pwa.promptEvent.prompt();\n        },\n        async sendPost(url)\n        {\n            const rawResponse = await fetch(url,\n            {\n                method: 'POST',\n                credentials: 'omit',\n            });\n        },\n        async sendToken(token)\n        {\n            const rawResponse = await fetch('/api/save_token/',\n            {\n                method: 'POST',\n                credentials: 'omit',\n                headers:\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                {\n                    \"token\": token\n                })\n            });\n        },\n        async sendMode(mode)\n        {\n            const rawResponse = await fetch('/api/set_mode/',\n            {\n                method: 'POST',\n                credentials: 'omit',\n                headers:\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                {\n                    \"mode\": mode\n                })\n            });\n            // const content = await rawResponse.json();\n        },\n        async setStrategy()\n        {\n            this.registration.active.postMessage(\n            {\n                action: 'updateProductCachePolicy',\n                policy: this.strategy\n            });\n        },\n        async setUserCookie()\n        {\n            if (this.usergroup === '1' || this.usergroup === '2')\n            {\n                this._setCookie(\"User\", this.usergroup);\n            }\n            else\n            {\n                this._deteleCookie(\"User\");\n            }\n        },\n        async setNotificationConfigCookie()\n        {\n            if (this.notificationConfig === 'only_orders' || this.notificationConfig === 'none')\n            {\n                this._setCookie(\"notificationConfig\", this.notificationConfig);\n            }\n            else\n            {\n                this.notificationConfig = \"default\"\n                this._setCookie(\"notificationConfig\", this.notificationConfig);\n            }\n            this.sendMode(this.notificationConfig)\n        },\n        async initStrategy()\n        {\n            let response = await fetch(\"/sw/productCachePolicy\").catch(err =>\n            {\n                return null;\n            });\n            let productCachePolicy = \"none\";\n            if (response != null)\n                productCachePolicy = await response.json().then(data =>\n                {\n                    return data.policy;\n                }).catch(err =>\n                {\n                    return \"none\";\n                });\n            this.strategy = productCachePolicy;\n\n        },\n        initUsergroupCookie()\n        {\n            let usergroupCookie = this._getCookieValue('User');\n            if (usergroupCookie)\n                this.usergroup = usergroupCookie;\n            else\n                this.usergroup = \"none\"\n        },\n        initNotificationConfigCookie()\n        {\n            let notificationConfigCookie = this._getCookieValue('notificationConfig');\n            if (notificationConfigCookie = null) notificationConfigCookie = 'default';\n\n\n            this.notificationConfig = notificationConfigCookie;\n\n            this.setNotificationConfigCookie()\n\n            let subscribed = this._getCookieValue(\"notificationSubscribed\");\n            if (subscribed == null) subscribed = false;\n            this.notificationSubscribed = (Notification.permission === 'granted');\n            if (window.matchMedia('(display-mode: standalone)').matches)\n            {\n                this.pwa.installed = true;\n            }\n            this.showNotificationPrompt = Notification.permission !== 'granted' && this.pwa.installed;\n        },\n        async _getStrategy()\n        {\n            if (this.registration.active)\n            {\n                let response = await fetch(\"/sw/productCachePolicy\").catch(err =>\n                {\n                    return null;\n                });\n                let productCachePolicy = \"none\";\n                if (response != null)\n                    productCachePolicy = await response.json().then(data =>\n                    {\n                        return data.policy;\n                    }).catch(err =>\n                    {\n                        return \"none\";\n                    });\n                return productCachePolicy;\n            }\n            return \"none\";\n        },\n        _setCookie(key, value)\n        {\n            let parsedCookies = this._parseDocumentCookies();\n            parsedCookies = this._setValueOnParsedCookies(parsedCookies, key, value);\n            let stringifiedCookies = this._stringifyParsedCookies(parsedCookies);\n            let cookie = `${key}=${value}`\n            document.cookie = cookie;\n\n            if (key !== \"User\")\n                return\n            if (this.registration.active)\n            {\n                this.registration.active.postMessage(\n                {\n                    action: 'setUserCookie',\n                    cookies: cookie\n                });\n            }\n        },\n        _getCookieValue(key)\n        {\n            let parsedCookies = this._parseDocumentCookies();\n            for (let cookie of parsedCookies)\n            {\n                if (cookie[0] === key)\n                    return cookie[1];\n            }\n            return null\n        },\n        _deteleCookie(key)\n        {\n            document.cookie = `${key}= ; expires = Thu, 01 Jan 1970 00:00:00 GMT`\n        },\n        _parseDocumentCookies()\n        {\n            let docCookies = document.cookie;\n            if (docCookies === \"\")\n                return []\n            docCookies = docCookies.split('; ');\n            let parsedCookies = [];\n            for (let docCookie of docCookies)\n            {\n                let parsedCookie = docCookie.split('=');\n                parsedCookies.push(parsedCookie);\n            }\n            return parsedCookies;\n        },\n        _setValueOnParsedCookies(parsedCookies, key, value)\n        {\n            let valueSet = false;\n            for (let i = 0; i < parsedCookies.length; ++i)\n            {\n                if (parsedCookies[i][0] === key)\n                {\n                    parsedCookies[i][1] = value\n                    valueSet = true;\n                }\n            }\n            if (!valueSet)\n                parsedCookies.push([key, value]);\n            return parsedCookies;\n        },\n        _stringifyParsedCookies(parsedCookies)\n        {\n            let stringifiedCookies = \"\";\n            for (let cookie of parsedCookies)\n            {\n                stringifiedCookies += `${cookie[0]}=${cookie[1]};`;\n            }\n            return stringifiedCookies;\n        },\n        _firebaseInit()\n        {\n            firebase.initializeApp(this.firebase.config);\n            this.firebase.messaging = firebase.messaging();\n            this.firebase.messaging.usePublicVapidKey(\n                \"BHEX_KV05JO3refzgJbNXaXObnSiCb2kjx1rOsLWhMon4dea2ddfiYD0iLBHm6DsQkVp8sCLr2Ypuuz6haDnOzo\"\n            );\n            this._firebaseGetToken();\n        },\n        _firebaseGetToken()\n        {\n            const THIS = this;\n            return THIS.firebase.messaging\n                .getToken()\n                .then(function (currentToken)\n                {\n                    if (currentToken)\n                    {\n                        THIS.firebase.token = currentToken;\n                        THIS.notificationSubscribed = true;\n                        THIS.sendToken(currentToken)\n                        THIS.showNotificationPrompt = false\n                        THIS._setCookie(\"notificationSubscribed\", \"true\")\n                    }\n                    else\n                    {\n                        console.log(\n                            \"No Instance ID token available. Request permission to generate one.\"\n                        );\n                    }\n                })\n                .catch(function (err)\n                {\n                    console.log(\"An error occurred while retrieving token. \", err);\n                });\n        },\n        _firebaseRequestPermission()\n        {\n            const THIS = this;\n            this.firebase.messaging\n                .requestPermission()\n                .then(() =>\n                {\n                    // console.log('Notification permission granted.');\n                    this._firebaseGetToken().then(response =>\n                    {\n                        let notificationConfigCookie = THIS._getCookieValue('notificationConfig');\n                        if (notificationConfigCookie)\n                            THIS.notificationConfig = notificationConfigCookie;\n                        else\n                            THIS.notificationConfig = \"default\"\n                        // let payload = {\n                        //     \t   \"to\": THIS.firebase.token,\n                        //         \"collapse_key\": \"type_a\",\n                        //         \"notification\":\n                        //         {\n                        //             \"title\": \"payload.title\",\n                        //             \"body\": \"payload.body\",\n                        //             \"icon\": \"payload.icon\",\n                        //             \"click_action\": \"payload.action\"\n                        //         },\n                        //         \"data\":\n                        //         {\n                        //             \"shown\": false\n                        //         }\n                        // };\n                        // FirebaseService.sendNotificationToSelf(payload)\n\n                    });\n                })\n                .catch(err =>\n                {\n                    console.log(\"Unable to get permission to notify.\", err);\n                });\n        },\n        firebaseNotificationsHandler()\n        {\n            const THIS = this;\n            this._firebaseInit();\n            // this._firebaseRequestPermission();\n\n            // -----------------------------------------------------------------------------------------------------\n            // Event listeners\n\n            THIS.firebase.messaging.onTokenRefresh(() =>\n            {\n                this._firebaseGetToken();\n                console.log(\"TOKEN REFRESHED: \", THIS.firebase.token);\n            });\n\n            THIS.firebase.messaging.onMessage(payload =>\n            {\n                console.log(\"Message received. \", payload);\n                if (Notification.permission === \"granted\")\n                {\n                    const notification = new Notification(payload.notification.title,\n                    {\n                        icon: payload.notification.icon,\n                        body: payload.notification.body\n                    });\n                    notification.onclick = function ()\n                    {\n                        console.log(\"NOTIFCATION CLICK\");\n                        window.open(payload.notification.click_action, \"_blank\");\n                    };\n                    return notification;\n                }\n            });\n        },\n    }\n}\n</script>\n"]}]}