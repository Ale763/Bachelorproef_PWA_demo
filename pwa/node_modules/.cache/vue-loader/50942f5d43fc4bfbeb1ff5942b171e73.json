{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ale/Documents/Bachproef/pwa-3/src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=scss&scoped=true&","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/App.vue","mtime":1560090210260},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.v-alert .v-alert__icon.v-icon {\n        color:white;\n    }\n",{"version":3,"sources":["App.vue"],"names":[],"mappingsopBA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n<v-app>\n    <v-toolbar app>\n        <v-toolbar-side-icon v-on:click=\"callChild()\"></v-toolbar-side-icon>\n        <v-toolbar-title class=\"black--text\">PWA Demo</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <v-btn icon @click=\"requestPermission()\">\n            <v-icon>notifications</v-icon>\n        </v-btn>\n    </v-toolbar>\n    <v-content>\n        <Navbar ref=\"Navbar\" />\n        <v-alert :value=\"true\" type=\"error\" v-if=\"!offline\" icon=\"cloud_off\" >\n            You are now offline. Functionality may be limited.\n        </v-alert>\n        <router-view />\n        <a style=\"position:absolute; top: 190px; right: 10px;\" v-on:click=\"myfetch(1)\">Request 1</a>\n        <!--            <a style=\"position:absolute; top: 205px; right: 10px;\"-->\n        <!--               v-on:click=\"myfetch(2)\">Request 2-->\n        <!--            </a>-->\n        <!--            <a style=\"position:absolute; top: 220px; right: 10px;\"-->\n        <!--               v-on:click=\"_testMethod()\">jsqmdlfkjqslmdjfq-->\n        <!--            </a>-->\n        <!--            <a style=\"position:absolute; top: 240px; right: 10px;\"-->\n        <!--               href=\"https://localhost:8080\">Request 2-->\n        <!--            </a>-->\n        <!--            <a style=\"position:absolute; top: 35px; right: 10px;\"-->\n        <!--               v-on:click=\"send_new_sw()\">UPDATE SW-->\n        <!--            </a>-->\n        <!--            <a style=\"position:absolute; top: 50px; right: 10px;\"-->\n        <!--               v-on:click=\"request_from_sw()\">REQUEST-->\n        <!--            </a>-->\n\n        <!--            <form action=\"/\" method=\"post\">-->\n\n        <!--                <button>Submit</button>-->\n        <!--            </form>-->\n\n    </v-content>\n</v-app>\n</template>\n\n<script>\nimport Product from \"./components/Product\";\nimport Post from './components/Post';\nimport Navbar from './components/Navbar';\n\nimport\n{\n    MagentoAPIService\n}\nfrom \"./services/MagentoAPIService\";\nimport\n{\n    FirebaseService\n}\nfrom \"./services/FirebaseService\";\nimport * as firebase from 'firebase/app';\nimport 'firebase/messaging';\nimport * as localForage from \"localforage\";\nimport axios from 'axios';\nimport './env.js';\nimport\n{\n    ServiceWorkerLib\n}\nfrom './modules/ServiceWorkerLib.ts';\n\nexport default\n{\n    name: 'App',\n    components:\n    {\n        Product,\n        Post,\n        'Navbar': Navbar\n    },\n    data()\n    {\n        return {\n            firebase:\n            {\n                config:\n                {\n                    apiKey: \"AIzaSyAyGInviSJMCyZV_XHLIRa8fKAt-wsaAJA\",\n                    authDomain: \"pwademo-763.firebaseapp.com\",\n                    databaseURL: \"https://pwademo-763.firebaseio.com\",\n                    projectId: \"pwademo-763\",\n                    storageBucket: \"pwademo-763.appspot.com\",\n                    messagingSenderId: \"857384407396\"\n                },\n                messaging: null,\n                token: null,\n            },\n            swLib: null,\n            service_worker:\n            {\n                refreshing: false,\n                reloadRequested: false\n            },\n            lf: null,\n            currentWorker: null,\n            newWorker: null,\n\t\t\tdrawer: '',\n\t\t\toffline: false,\n            items: [\n            {\n                title: 'Home',\n                icon: 'dashboard',\n                link: '/'\n            },\n            {\n                title: 'Categories',\n                icon: 'dashboard',\n                link: '/categories'\n            },\n            {\n                title: 'About',\n                icon: 'question_answer',\n                link: '/about'\n            },\n            {\n                title: 'Products',\n                icon: 'question_answer',\n                link: '/products'\n            },\n            {\n                title: 'Update',\n                icon: 'question_answer',\n                link: '/update'\n            },\n            {\n                title: 'Bare Update',\n                icon: 'question_answer',\n                link: '/update-without-skip-and-claim'\n            },\n            {\n                title: 'Update with skip',\n                icon: 'question_answer',\n                link: '/update-with-skip-no-claim'\n            },\n            {\n                title: 'Update with skip & claim',\n                icon: 'question_answer',\n                link: '/update-with-skip-and-claim'\n            }, ]\n        }\n    },\n    computed:\n    {\n        posts: function ()\n        {\n            let posts = this.$store.getters['posts/allPosts'];\n            // console.log(\"All Posts: \", posts);\n            return posts;\n        },\n        products: function ()\n        {\n            let products = this.$store.getters['products/allProducts'];\n            // console.log(\"All Posts: \", posts);\n            return products;\n        },\n        firebase_token()\n        {\n\n        },\n\n    },\n    async created()\n    {\n        localForage.config(\n        {\n            name: 'Alessio',\n            version: 1.0,\n            size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n            storeName: 'lf', // Should be alphanumeric, with underscores.\n            description: 'some description'\n        });\n        this.lf = localForage.createInstance(\n        {\n            name: \"lf\"\n        });\n        this.sw();\n\t\tthis.firebaseNotificationsHandler();\n\t\t\n\t\twindow.addEventListener('online',  () => {this._isOffline(false)});\n  \t\twindow.addEventListener('offline', () => {this._isOffline(true)});\n\n        // this.send_msg_to_sw_with_response({action: 'SW'})\n        //     .then(m =>\n        //           {\n        // \t          console.log(\"SW VERSION: \", m)\n        //           }\n        //     );\n\n        // axios.get(\"https://pwa.local:8080/api\")\n        //      .then(response => {\n        //      \tdocument.getElementById(\"nr\").innerHTML = response.data;\n        //      }).catch(error => console.error(error));\n\n        // window.onbeforeunload = async function (event)\n        // {\n        // \tevent.preventDefault();\n        // \tconsole.log(\"FETCH RECEIVED\");\n        // \tlet registration = await navigator.serviceWorker.register(\"/sw.js\")\n        // \t                                  .then((registration) =>\n        // \t                                        {\n        // \t\t                                        return registration\n        // \t                                        });\n        // \tlet waiting = registration.waiting;\n        // \tif (waiting)\n        // \t{\n        // \t\tconsole.log(\"WAITING SW AV\");\n        // \t\tif ('serviceWorker' in navigator)\n        // \t\t{\n        // \t\tregistration.active.postMessage({action: 'updateIfSingleClient'})\n        // \t\t            .then((response) =>\n        // \t\t                  {\n        // \t\t                  console.log(response)\n        // \t\t                  });\n        // \t\t}\n        //\n        // \t}\n        // \tconsole.log(\"Main route change\");\n        // \treturn \"Are you sure you want to navigate away?\";\n        // }\n    },\n    watch:\n    {\n        async $route(to, from)\n        {\n            const THIS = this;\n            // let registration = await navigator.serviceWorker.register(\"/sw.js\")\n            //                                   .then((registration) =>\n            //                                         {\n            // \t                                        return registration\n            //                                         });\n            // let waiting = registration.waiting;\n\n            // if (waiting && false)\n            /*\n\nif (false)\n\n{\n\nconsole.log(\"WAITING SW AV\");\n\nthis.send_msg_to_sw_with_response({action: 'updateIfSingleClient'})\n\n    .then(m =>\n\n          {\n\n          console.log(m)\n                                  if (m === \"UPDATE\")\n                                  {\n                                  \twaiting.addEventListener('statechange', (event) =>\n                                    {\n\t                                    // const activating = (event.target.state === 'activating');\n                                    \tlet activated = (event.target.state === 'activated');\n\t                                    let a = (registration.active.state === 'activated');\n\t                                    let ab = (waiting.state === 'activated');\n\t                                    let buh = event.target.state.startsWith('activated');\n\t                                    // event.currentTarget.postMessage({action: 'SW'});\n\t                                    let c = event.currentTarget.state;\n\t                                    this.pp(event.currentTarget, {action: 'SW'}).then(m =>\n                                                                                          console.log(\"SW Version: \",\n                                                                                                      m));\n\t                                    // event.target.postMessage({action: 'SW'});\n\t                                    let d = event.target.state;\n\t                                    this.pp(event.target, {action: 'SW'}).then(m =>\n\t                                                                               console.log(\"SW Version: \",\n\t                                                                                           m));\n\t                                    // waiting.postMessage({action: 'claim'});\n                                    \t// if(activating)\n                                        // {\n                                        //\n                                        // }\n                                    \t// else\n                                        if (ab)\n                                        {\n\n                                  waiting.postMessage({action: 'claim'});\n\t                                        // this.send_msg_to_sw_with_response({action: 'SW'})\n\t                                        //     .then(m =>\n\t                                        //           {\n\n                                    //               console.log(\"SW VERSION: \", m)\n\t                                        //           }\n\t                                        //     );\n                                        }\n\n                                    });\n                                  }\n\n          }\n\n    );\n\n// if ('serviceWorker' in navigator)\n\n// {\n\n// \tthis.send_message_to_sw(\"qslmdfkjqmlsdj\");\n\n// }\n\n// navigator.serviceWorker.controller.postMessage({action: 'updateIfSingleClient'});\n\n// .then((response) =>\n\n//       {\n\n//           console.log(response)\n\n//       });\n\n}\n*/\n            // navigator.serviceWorker.addEventListener('controllerchange', function ()\n            // {\n            // \tthis.send_msg_to_sw_with_response({action: 'SW'})\n            // \t    .then(m =>\n            // \t          {\n            // \t\t          console.log(\"SW VERSION: \", m)\n            // \t          }\n            // \t    );\n            // });\n\n            // console.log(\"Main route change\");\n        }\n    },\n    methods:\n    {\n\t\t_isOffline(value)\n\t\t{\n\t\t\tthis.offline = value;\n\t\t},\n        _testMethod()\n        {\n            this.send_msg_to_sw_with_response(\n            {\n                action: 'SW'\n            }).then(m => console.log(m))\n        },\n        callChild()\n        {\n            // this.bus.$emit('toggleNavbar');\n            this.$refs.Navbar._toggleNavbar();\n        },\n        _firebaseInit()\n        {\n            firebase.initializeApp(this.firebase.config);\n            this.firebase.messaging = firebase.messaging();\n            this.firebase.messaging.usePublicVapidKey(\"BHEX_KV05JO3refzgJbNXaXObnSiCb2kjx1rOsLWhMon4dea2ddfiYD0iLBHm6DsQkVp8sCLr2Ypuuz6haDnOzo\");\n        },\n        _firebaseGetToken()\n        {\n            const THIS = this;\n            return THIS.firebase.messaging\n                .getToken()\n                .then(function (currentToken)\n                {\n                    if (currentToken)\n                    {\n                        THIS.firebase.token = currentToken;\n                        THIS.lf.setItem(\"token\", currentToken)\n                            .then((value) =>\n                            {\n                                console.log(\"LocalForage: \", value)\n                            })\n                            .catch((error) =>\n                            {\n                                console.error(\"LocalForage: \", error)\n                            });\n                        console.log(\"TOKEN: \", currentToken);\n                        currentToken;\n                    }\n                    else\n                    {\n                        console.log('No Instance ID token available. Request permission to generate one.');\n                    }\n                })\n                .catch(function (err)\n                {\n                    console.log('An error occurred while retrieving token. ', err);\n                    // setTokenSentToServer(false);\n                });\n\n        },\n        _firebaseRequestPermission()\n        {\n            const THIS = this;\n            this.firebase.messaging\n                .requestPermission()\n                .then(() =>\n                {\n                    // console.log('Notification permission granted.');\n                    this._firebaseGetToken()\n                        .then((response) =>\n                        {\n                            // let payload = {\n                            //     \t   \"to\": THIS.firebase.token,\n                            //         \"collapse_key\": \"type_a\",\n                            //         \"notification\":\n                            //         {\n                            //             \"title\": \"payload.title\",\n                            //             \"body\": \"payload.body\",\n                            //             \"icon\": \"payload.icon\",\n                            //             \"click_action\": \"payload.action\"\n                            //         },\n                            //         \"data\":\n                            //         {\n                            //             \"shown\": false\n                            //         }\n                            // };\n                            // FirebaseService.sendNotificationToSelf(payload)\n                        })\n\n                })\n                .catch((err) =>\n                {\n                    console.log('Unable to get permission to notify.', err);\n                });\n        },\n        firebaseNotificationsHandler()\n        {\n            const THIS = this;\n            this._firebaseInit();\n            this._firebaseRequestPermission();\n\n            // -----------------------------------------------------------------------------------------------------\n            // Event listeners\n\n            THIS.firebase.messaging\n                .onTokenRefresh(\n                    () =>\n                    {\n                        this._firebaseGetToken();\n                        console.log(\"TOKEN REFRESHED: \", THIS.firebase.token)\n                    });\n\n            THIS.firebase.messaging\n                .onMessage(\n                    (payload) =>\n                    {\n                        console.log('Message received. ', payload);\n                        if (Notification.permission === 'granted')\n                        {\n                            const notification = new Notification(payload.notification.title,\n                            {\n                                icon: payload.notification.icon,\n                                body: payload.notification.body,\n                            });\n                            notification.onclick = function ()\n                            {\n                                console.log(\"NOTIFCATION CLICK\");\n                                window.open(payload.notification.click_action,\n                                    \"_blank\");\n                            };\n                            return notification;\n                        }\n                    });\n        },\n        send_msg_to_sw_with_response(msg)\n        {\n            return new Promise(function (resolve, reject)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    if (event.data.error)\n                    {\n                        reject(event.data.error);\n                    }\n                    else\n                    {\n                        resolve(event.data);\n                    }\n                };\n\n                navigator.serviceWorker.controller.postMessage(msg,\n                    [messageChannel.port2]);\n            });\n        },\n        pp(sw, msg)\n        {\n            return new Promise(function (resolve, reject)\n            {\n                var messageChannel = new MessageChannel();\n                messageChannel.port1.onmessage = function (event)\n                {\n                    if (event.data.error)\n                    {\n                        reject(event.data.error);\n                    }\n                    else\n                    {\n                        resolve(event.data);\n                    }\n                };\n\n                sw.postMessage(msg, [messageChannel.port2]);\n            });\n        },\n        send_message_to_sw(msg)\n        {\n            if ('serviceWorker' in navigator)\n            {\n                const currentWorker = this.swLib.getCurrentWorker();\n                let cookie = `Type=${msg}`;\n                this._setCookie(\"Type\", msg);\n                currentWorker.postMessage(\n                {\n                    \"dev_comm\": true,\n                    \"cookie\": cookie\n                });\n            }\n        },\n        request_from_sw()\n        {\n            let request = new Request(\"/update.js\");\n            const requestOptions = {\n                method: 'GET'\n            };\n            return fetch(request, requestOptions)\n                .then((response) =>\n                {\n                    return {\n                        request: request,\n                        response: response\n                    };\n                })\n                .catch(error =>\n                {\n                    console.error(error);\n                    console.error(JSON.stringify(error));\n                    return {\n                        request: request,\n                        response: response\n                    };\n                });\n        },\n        send_new_sw()\n        {\n            if (this.newWorker)\n                this.newWorker.postMessage(\n                {\n                    action: 'skipWaiting'\n                });\n        },\n        sw()\n        {\n            window.addEventListener(\n                'load',\n                async () =>\n                {\n                    this.swLib = new ServiceWorkerLib(\"/sw.js\", \"/\");\n                    console.log(\"REGISTRATION: \", this.swLib);\n                    window.addEventListener(\"newSW\", () =>\n                    {\n                        console.log(\"newSW arrived\")\n                    });\n                    // if (event.request.mode === 'navigate' && this.swLib.waiting) {\n                    // \tif ((await clients.matchAll()).length < 2) {\n                    // \t\tregistration.waiting.postMessage(\"skipWaiting\");\n                    // \t}\n                    // }\n                    // const registration = swLib;\n                    //\n                    // registration\n                    // .then(\n                    // (registration) =>\n                    // {\n                    // \t// Registration was successful\n                    //     this.currentWorker = registration;\n                    //\n                    // \t// Source: https://stackoverflow.com/questions/37573482/to-check-if-serviceworker-is-in-waiting-state\n                    // \tif (registration.waiting && registration.active)\n                    // \t{\n                    // \t\tthis.newWorker = registration.waiting;\n                    // \t} else\n                    // \t{\n                    // \t\tregistration.addEventListener(\n                    // \t\t'updatefound',\n                    // \t\t() =>\n                    // \t\t{\n                    // \t\tthis.newWorker = registration.installing;\n                    //\n                    // \t\tthis.newWorker\n                    // \t\t    .addEventListener(\n                    // \t\t    'statechange',\n                    // \t\t    () =>\n                    // \t\t    {\n                    // \t\t    // Has service worker state changed?\n                    // \t\t    switch (this.newWorker.state)\n                    // \t\t    {\n                    // \t\t    case 'installed':\n                    //\n                    // \t\t    // There is a new service worker available, show the\n                    // \t\t    // notification\n                    // \t\t    if (navigator.serviceWorker.controller)\n                    // \t\t    {\n                    // \t\t    console.log(\"NEW SW AVAILABLE\");\n                    // \t\t    }\n                    // \t\t    break;\n                    // \t\t    }\n                    // \t\t    });\n                    // \t\t});\n                    // \t}\n                    //     return navigator.serviceWorker.ready;\n                    //\n                    // }, (err) =>\n                    // {\n                    // \t// registration failed :(\n                    // \tconsole.error('SW registration failed: ', err);\n                    // });\n\n                    navigator.serviceWorker.addEventListener('controllerchange', function ()\n                    {\n                        // if (!this.service_worker.refreshing && THIS.service_worker.reloadRequested)\n                        // {\n                        // \twindow.location.reload();\n                        // \tthis.service_worker.refreshing = true;\n                        //\n                        // } else\n                        // {\n                        // \tthis.service_worker.refreshing = false;\n                        // \tthis.service_worker.reloadRequested = false;\n                        // \treturn\n                        // }\n\n                    });\n                });\n\n        },\n        _navigateTo(url, buh)\n        {\n            this.lf.setItem(\"buh\", buh)\n                .catch(error =>\n                {\n                    console.error(error)\n                });\n            window.location = url;\n        },\n        _setCookie(key, value)\n        {\n            document.cookie = `${key}=${value};`;\n        },\n        myfetch(p)\n        {\n            let request = new Request(\"https://pwa.local:8080/update.js\");\n            request.headers.append(\"X-X\", p);\n            fetch(request);\n        }\n    }\n}\n</script>\n<style lang=\"scss\" scoped>\n.v-alert .v-alert__icon.v-icon {\n        color:white;\n    }\n</style>\n"]}]}