{"remainingRequest":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ale/Documents/Bachproef/pwa-3/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ale/Documents/Bachproef/pwa-3/src/App.vue","mtime":1558883156792},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ale/Documents/Bachproef/pwa-3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\timport Product from \"./components/Product\";\n\timport Post from './components/Post';\n\timport Navbar from './components/Navbar';\n\n\timport {MagentoAPIService} from \"./services/MagentoAPIService\";\n\timport {FirebaseService} from \"./services/FirebaseService\";\n\timport * as firebase from 'firebase/app';\n\timport 'firebase/messaging';\n\timport * as localForage from \"localforage\";\n\timport axios from 'axios';\n\timport './env.js';\n\timport {ServiceWorkerLib} from './modules/ServiceWorkerLib.ts';\n\n\texport default {\n\t\tname: 'App',\n\t\tcomponents: {\n\t\t\tProduct,\n\t\t\tPost,\n\t\t\t'Navbar': Navbar\n\t\t},\n\t\tdata()\n\t\t{\n\t\t\treturn {\n\t\t\t\tfirebase:\n\t\t\t\t{\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tapiKey: \"AIzaSyAyGInviSJMCyZV_XHLIRa8fKAt-wsaAJA\",\n\t\t\t\t\t\tauthDomain: \"pwademo-763.firebaseapp.com\",\n\t\t\t\t\t\tdatabaseURL: \"https://pwademo-763.firebaseio.com\",\n\t\t\t\t\t\tprojectId: \"pwademo-763\",\n\t\t\t\t\t\tstorageBucket: \"pwademo-763.appspot.com\",\n\t\t\t\t\t\tmessagingSenderId: \"857384407396\"\n\t\t\t\t\t},\n\t\t\t\t\tmessaging: null,\n\t\t\t\t\ttoken: null,\n\t\t\t\t},\n\t\t\t\tswLib: null,\n\t\t\t\tservice_worker:\n\t\t\t\t{\n\t\t\t\t\trefreshing: false,\n\t\t\t\t\treloadRequested: false\n\t\t\t\t},\n\t\t\t\tlf: null,\n\t\t\t\tcurrentWorker: null,\n\t\t\t\tnewWorker: null,\n\t\t\t\tdrawer: '',\n\t\t\t\titems: [\n\t\t\t\t\t{title: 'Home', icon: 'dashboard', link: '/'},\n\t\t\t\t\t{title: 'Categories', icon: 'dashboard', link: '/categories'},\n\t\t\t\t\t{title: 'About', icon: 'question_answer', link: '/about'},\n\t\t\t\t\t{title: 'Products', icon: 'question_answer', link: '/products'},\n\t\t\t\t\t{title: 'Update', icon: 'question_answer', link: '/update'},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Bare Update', icon: 'question_answer', link:\n\t\t\t\t\t\t'/update-without-skip-and-claim'\n\t\t\t\t\t},\n\t\t\t\t\t{title: 'Update with skip', icon: 'question_answer', link: '/update-with-skip-no-claim'},\n\t\t\t\t\t{title: 'Update with skip & claim', icon: 'question_answer', link: '/update-with-skip-and-claim'},\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tcomputed:\n\t\t{\n\t\t\tposts: function ()\n\t\t\t{\n\t\t\t\tlet posts = this.$store.getters['posts/allPosts'];\n\t\t\t\t// console.log(\"All Posts: \", posts);\n\t\t\t\treturn posts;\n\t\t\t},\n\t\t\tproducts: function ()\n\t\t\t{\n\t\t\t\tlet products = this.$store.getters['products/allProducts'];\n\t\t\t\t// console.log(\"All Posts: \", posts);\n\t\t\t\treturn products;\n\t\t\t},\n\t\t\tfirebase_token()\n\t\t\t{\n\n\t\t\t}\n\t\t},\n\t\tasync created()\n\t\t{\n\t\t\tlocalForage.config({\n\t\t\t\t                   name: 'Alessio',\n\t\t\t\t                   version: 1.0,\n\t\t\t\t                   size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n\t\t\t\t                   storeName: 'lf', // Should be alphanumeric, with underscores.\n\t\t\t\t                   description: 'some description'\n\t\t\t                   });\n\t\t\tthis.lf = localForage.createInstance({name: \"lf\"});\n\t\t\tthis.sw();\n\t\t\tthis.firebaseNotificationsHandler();\n\n\t\t\t// this.send_msg_to_sw_with_response({action: 'SW'})\n\t\t\t//     .then(m =>\n\t\t\t//           {\n\t\t\t// \t          console.log(\"SW VERSION: \", m)\n\t\t\t//           }\n\t\t\t//     );\n\n\t\t\t// axios.get(\"https://pwa.local:8080/api\")\n\t\t\t//      .then(response => {\n\t\t\t//      \tdocument.getElementById(\"nr\").innerHTML = response.data;\n\t\t\t//      }).catch(error => console.error(error));\n\n\t\t\t// window.onbeforeunload = async function (event)\n\t\t\t// {\n\t\t\t// \tevent.preventDefault();\n\t\t\t// \tconsole.log(\"FETCH RECEIVED\");\n\t\t\t// \tlet registration = await navigator.serviceWorker.register(\"/sw.js\")\n\t\t\t// \t                                  .then((registration) =>\n\t\t\t// \t                                        {\n\t\t\t// \t\t                                        return registration\n\t\t\t// \t                                        });\n\t\t\t// \tlet waiting = registration.waiting;\n\t\t\t// \tif (waiting)\n\t\t\t// \t{\n\t\t\t// \t\tconsole.log(\"WAITING SW AV\");\n\t\t\t// \t\tif ('serviceWorker' in navigator)\n\t\t\t// \t\t{\n\t\t\t// \t\t\tregistration.active.postMessage({action: 'updateIfSingleClient'})\n\t\t\t// \t\t\t            .then((response) =>\n\t\t\t// \t\t\t                  {\n\t\t\t// \t\t\t\t                  console.log(response)\n\t\t\t// \t\t\t                  });\n\t\t\t// \t\t}\n            //\n\t\t\t// \t}\n\t\t\t// \tconsole.log(\"Main route change\");\n\t\t\t// \treturn \"Are you sure you want to navigate away?\";\n\t\t\t// }\n\t\t},\n\t\twatch: {\n\t\t\tasync $route(to, from)\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\t// let registration = await navigator.serviceWorker.register(\"/sw.js\")\n\t\t\t\t//                                   .then((registration) =>\n\t\t\t\t//                                         {\n\t\t\t\t// \t                                        return registration\n\t\t\t\t//                                         });\n\t\t\t\t// let waiting = registration.waiting;\n\n\t\t\t\t// if (waiting && false)\n                /*\n\t\t\t\tif (false)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"WAITING SW AV\");\n\t\t\t\t\tthis.send_msg_to_sw_with_response({action: 'updateIfSingleClient'})\n\t\t\t\t\t    .then(m =>\n\t\t\t\t\t          {\n\t\t\t\t\t\t          console.log(m)\n                                  if (m === \"UPDATE\")\n                                  {\n                                  \twaiting.addEventListener('statechange', (event) =>\n                                    {\n\t                                    // const activating = (event.target.state === 'activating');\n                                    \tlet activated = (event.target.state === 'activated');\n\t                                    let a = (registration.active.state === 'activated');\n\t                                    let ab = (waiting.state === 'activated');\n\t                                    let buh = event.target.state.startsWith('activated');\n\t                                    // event.currentTarget.postMessage({action: 'SW'});\n\t                                    let c = event.currentTarget.state;\n\t                                    this.pp(event.currentTarget, {action: 'SW'}).then(m =>\n                                                                                          console.log(\"SW Version: \",\n                                                                                                      m));\n\t                                    // event.target.postMessage({action: 'SW'});\n\t                                    let d = event.target.state;\n\t                                    this.pp(event.target, {action: 'SW'}).then(m =>\n\t                                                                               console.log(\"SW Version: \",\n\t                                                                                           m));\n\t                                    // waiting.postMessage({action: 'claim'});\n                                    \t// if(activating)\n                                        // {\n                                        //\n                                        // }\n                                    \t// else\n                                        if (ab)\n                                        {\n\t\t                                  waiting.postMessage({action: 'claim'});\n\t                                        // this.send_msg_to_sw_with_response({action: 'SW'})\n\t                                        //     .then(m =>\n\t                                        //           {\n\t\t                                    //               console.log(\"SW VERSION: \", m)\n\t                                        //           }\n\t                                        //     );\n                                        }\n\n                                    });\n                                  }\n\t\t\t\t\t          }\n\t\t\t\t\t    );\n\n\n\t\t\t\t\t// if ('serviceWorker' in navigator)\n\t\t\t\t\t// {\n\t\t\t\t\t// \tthis.send_message_to_sw(\"qslmdfkjqmlsdj\");\n\t\t\t\t\t// }\n\t\t\t\t\t// navigator.serviceWorker.controller.postMessage({action: 'updateIfSingleClient'});\n\n\t\t\t\t\t// .then((response) =>\n\t\t\t\t\t//       {\n\t\t\t\t\t//           console.log(response)\n\t\t\t\t\t//       });\n\n\t\t\t\t}\n*/\n\t\t\t\t// navigator.serviceWorker.addEventListener('controllerchange', function ()\n\t\t\t\t// {\n\t\t\t\t// \tthis.send_msg_to_sw_with_response({action: 'SW'})\n\t\t\t\t// \t    .then(m =>\n\t\t\t\t// \t          {\n\t\t\t\t// \t\t          console.log(\"SW VERSION: \", m)\n\t\t\t\t// \t          }\n\t\t\t\t// \t    );\n\t\t\t\t// });\n\n\t\t\t\t// console.log(\"Main route change\");\n\t\t\t}\n\t\t},\n\t\tmethods:\n\t\t{\n\t\t\t_testMethod()\n            {\n\t            this.send_msg_to_sw_with_response({action: 'SW'}).then(m => console.log(m))\n            },\n\t\t\tcallChild()\n\t\t\t{\n\t\t\t\t// this.bus.$emit('toggleNavbar');\n\t\t\t\tthis.$refs.Navbar._toggleNavbar();\n\t\t\t},\n\t\t\t_firebaseInit()\n\t\t\t{\n\t\t\t\tfirebase.initializeApp(this.firebase.config);\n\t\t\t\tthis.firebase.messaging = firebase.messaging();\n\t\t\t\tthis.firebase.messaging.usePublicVapidKey(\"BHEX_KV05JO3refzgJbNXaXObnSiCb2kjx1rOsLWhMon4dea2ddfiYD0iLBHm6DsQkVp8sCLr2Ypuuz6haDnOzo\");\n\t\t\t},\n\t\t\t_firebaseGetToken()\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\treturn THIS.firebase.messaging\n\t\t\t\t           .getToken()\n\t\t\t\t           .then(function (currentToken)\n\t\t\t\t                 {\n\t\t\t\t\t                 if (currentToken)\n\t\t\t\t\t                 {\n\t\t\t\t\t\t                 THIS.firebase.token = currentToken;\n\t\t\t\t\t\t                 THIS.lf.setItem(\"token\", currentToken)\n\t\t\t\t\t\t                     .then((value) =>\n\t\t\t\t\t\t                           {\n\t\t\t\t\t\t\t                           console.log(\"LocalForage: \", value)\n\t\t\t\t\t\t                           })\n\t\t\t\t\t\t                     .catch((error) =>\n\t\t\t\t\t\t                            {\n\t\t\t\t\t\t\t                            console.error(\"LocalForage: \", error)\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                 console.log(\"TOKEN: \", currentToken);\n\t\t\t\t\t\t                 currentToken;\n\t\t\t\t\t                 } else\n\t\t\t\t\t                 {\n\t\t\t\t\t\t                 console.log('No Instance ID token available. Request permission to generate one.');\n\t\t\t\t\t                 }\n\t\t\t\t                 })\n\t\t\t\t           .catch(function (err)\n\t\t\t\t                  {\n\t\t\t\t\t                  console.log('An error occurred while retrieving token. ', err);\n\t\t\t\t\t                  // setTokenSentToServer(false);\n\t\t\t\t                  });\n\n\t\t\t},\n\t\t\t_firebaseRequestPermission()\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\tthis.firebase.messaging\n\t\t\t\t    .requestPermission()\n\t\t\t\t    .then(() =>\n\t\t\t\t          {\n\t\t\t\t\t          // console.log('Notification permission granted.');\n\t\t\t\t\t          this._firebaseGetToken()\n\t\t\t\t\t              .then((response) =>\n\t\t\t\t\t                    {\n\t\t\t\t\t\t                    // let payload = {\n\t\t\t\t\t\t                    //     \t   \"to\": THIS.firebase.token,\n\t\t\t\t\t\t                    //         \"collapse_key\": \"type_a\",\n\t\t\t\t\t\t                    //         \"notification\":\n\t\t\t\t\t\t                    //         {\n\t\t\t\t\t\t                    //             \"title\": \"payload.title\",\n\t\t\t\t\t\t                    //             \"body\": \"payload.body\",\n\t\t\t\t\t\t                    //             \"icon\": \"payload.icon\",\n\t\t\t\t\t\t                    //             \"click_action\": \"payload.action\"\n\t\t\t\t\t\t                    //         },\n\t\t\t\t\t\t                    //         \"data\":\n\t\t\t\t\t\t                    //         {\n\t\t\t\t\t\t                    //             \"shown\": false\n\t\t\t\t\t\t                    //         }\n\t\t\t\t\t\t                    // };\n\t\t\t\t\t\t                    // FirebaseService.sendNotificationToSelf(payload)\n\t\t\t\t\t                    })\n\n\t\t\t\t          })\n\t\t\t\t    .catch((err) =>\n\t\t\t\t           {\n\t\t\t\t\t           console.log('Unable to get permission to notify.', err);\n\t\t\t\t           });\n\t\t\t},\n\t\t\tfirebaseNotificationsHandler()\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\tthis._firebaseInit();\n\t\t\t\tthis._firebaseRequestPermission();\n\n\t\t\t\t// -----------------------------------------------------------------------------------------------------\n\t\t\t\t// Event listeners\n\n\t\t\t\tTHIS.firebase.messaging\n\t\t\t\t    .onTokenRefresh(\n\t\t\t\t    () =>\n\t\t\t\t    {\n\t\t\t\t\t    this._firebaseGetToken();\n\t\t\t\t\t    console.log(\"TOKEN REFRESHED: \", THIS.firebase.token)\n\t\t\t\t    });\n\n\t\t\t\tTHIS.firebase.messaging\n\t\t\t\t    .onMessage(\n\t\t\t\t    (payload) =>\n\t\t\t\t    {\n\t\t\t\t\t    console.log('Message received. ', payload);\n\t\t\t\t\t    if (Notification.permission === 'granted')\n\t\t\t\t\t    {\n\t\t\t\t\t\t    const notification = new Notification(payload.notification.title, {\n\t\t\t\t\t\t\t    icon: payload.notification.icon,\n\t\t\t\t\t\t\t    body: payload.notification.body,\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t    notification.onclick = function ()\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    console.log(\"NOTIFCATION CLICK\");\n\t\t\t\t\t\t\t    window.open(payload.notification.click_action,\n\t\t\t\t\t\t\t                \"_blank\");\n\t\t\t\t\t\t    };\n\t\t\t\t\t\t    return notification;\n\t\t\t\t\t    }\n\t\t\t\t    });\n\t\t\t},\n\t\t\tsend_msg_to_sw_with_response(msg)\n\t\t\t{\n\t\t\t\treturn new Promise(function (resolve, reject)\n\t\t\t\t                   {\n\t\t\t\t\t                   var messageChannel = new MessageChannel();\n\t\t\t\t\t                   messageChannel.port1.onmessage = function (event)\n\t\t\t\t\t                   {\n\t\t\t\t\t\t                   if (event.data.error)\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   reject(event.data.error);\n\t\t\t\t\t\t                   } else\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   resolve(event.data);\n\t\t\t\t\t\t                   }\n\t\t\t\t\t                   };\n\n\t\t\t\t\t                   navigator.serviceWorker.controller.postMessage(msg,\n\t\t\t\t\t                                                                  [messageChannel.port2]);\n\t\t\t\t                   });\n\t\t\t},\n\t\t\tpp(sw, msg)\n\t\t\t{\n\t\t\t\treturn new Promise(function (resolve, reject)\n\t\t\t\t                   {\n\t\t\t\t\t                   var messageChannel = new MessageChannel();\n\t\t\t\t\t                   messageChannel.port1.onmessage = function (event)\n\t\t\t\t\t                   {\n\t\t\t\t\t\t                   if (event.data.error)\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   reject(event.data.error);\n\t\t\t\t\t\t                   } else\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   resolve(event.data);\n\t\t\t\t\t\t                   }\n\t\t\t\t\t                   };\n\n\t\t\t\t\t                   sw.postMessage(msg, [messageChannel.port2]);\n\t\t\t\t                   });\n\t\t\t},\n\t\t\tsend_message_to_sw(msg)\n\t\t\t{\n\t\t\t\tif ('serviceWorker' in navigator)\n\t\t\t\t{\n\t\t\t\t\tconst currentWorker = this.swLib.getCurrentWorker();\n\t\t\t\t\tlet cookie = `Type=${msg}`;\n\t\t\t\t\tthis._setCookie(\"Type\", msg);\n\t\t\t\t\tcurrentWorker.postMessage(\n\t\t\t\t\t{\n\t\t\t\t\t\t\"dev_comm\": true,\n\t\t\t\t\t\t\"cookie\": cookie\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\trequest_from_sw()\n\t\t\t{\n\t\t\t\tlet request = new Request(\"/update.js\");\n\t\t\t\tconst requestOptions = {method: 'GET'};\n\t\t\t\treturn fetch(request, requestOptions)\n\t\t\t\t.then((response) =>\n\t\t\t\t      {\n\t\t\t\t\t      return {\n\t\t\t\t\t\t      request: request,\n\t\t\t\t\t\t      response: response\n\t\t\t\t\t      };\n\t\t\t\t      })\n\t\t\t\t.catch(error =>\n\t\t\t\t       {\n\t\t\t\t\t       console.error(error);\n\t\t\t\t\t       console.error(JSON.stringify(error));\n\t\t\t\t\t       return {\n\t\t\t\t\t\t       request: request,\n\t\t\t\t\t\t       response: response\n\t\t\t\t\t       };\n\t\t\t\t       });\n\t\t\t},\n\t\t\tsend_new_sw()\n\t\t\t{\n\t\t\t\tif (this.newWorker)\n\t\t\t\t\tthis.newWorker.postMessage({action: 'skipWaiting'});\n\t\t\t},\n\t\t\tsw()\n\t\t\t{\n\t\t\t\twindow.addEventListener(\n\t\t\t\t'load',\n\t\t\t\tasync () =>\n\t\t\t\t{\n\t\t\t\t\tthis.swLib = new ServiceWorkerLib(\"/sw.js\", \"/\");\n\t\t\t\t\tconsole.log(\"REGISTRATION: \", this.swLib);\n\t\t\t\t\twindow.addEventListener(\"newSW\", () => {console.log(\"newSW arrived\")});\n\t\t\t\t\t// if (event.request.mode === 'navigate' && this.swLib.waiting) {\n\t\t\t\t\t// \tif ((await clients.matchAll()).length < 2) {\n\t\t\t\t\t// \t\tregistration.waiting.postMessage(\"skipWaiting\");\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// const registration = swLib;\n\t\t\t\t\t//\n\t\t\t\t\t// registration\n\t\t\t\t\t// .then(\n\t\t\t\t\t// (registration) =>\n\t\t\t\t\t// {\n\t\t\t\t\t// \t// Registration was successful\n\t\t\t\t\t//     this.currentWorker = registration;\n\t\t\t\t\t//\n\t\t\t\t\t// \t// Source: https://stackoverflow.com/questions/37573482/to-check-if-serviceworker-is-in-waiting-state\n\t\t\t\t\t// \tif (registration.waiting && registration.active)\n\t\t\t\t\t// \t{\n\t\t\t\t\t// \t\tthis.newWorker = registration.waiting;\n\t\t\t\t\t// \t} else\n\t\t\t\t\t// \t{\n\t\t\t\t\t// \t\tregistration.addEventListener(\n\t\t\t\t\t// \t\t'updatefound',\n\t\t\t\t\t// \t\t() =>\n\t\t\t\t\t// \t\t{\n\t\t\t\t\t// \t\t\tthis.newWorker = registration.installing;\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t\tthis.newWorker\n\t\t\t\t\t// \t\t\t    .addEventListener(\n\t\t\t\t\t// \t\t\t    'statechange',\n\t\t\t\t\t// \t\t\t    () =>\n\t\t\t\t\t// \t\t\t    {\n\t\t\t\t\t// \t\t\t\t    // Has service worker state changed?\n\t\t\t\t\t// \t\t\t\t    switch (this.newWorker.state)\n\t\t\t\t\t// \t\t\t\t    {\n\t\t\t\t\t// \t\t\t\t\t    case 'installed':\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t\t\t\t\t    // There is a new service worker available, show the\n\t\t\t\t\t// \t\t\t\t\t\t    // notification\n\t\t\t\t\t// \t\t\t\t\t\t    if (navigator.serviceWorker.controller)\n\t\t\t\t\t// \t\t\t\t\t\t    {\n\t\t\t\t\t// \t\t\t\t\t\t\t    console.log(\"NEW SW AVAILABLE\");\n\t\t\t\t\t// \t\t\t\t\t\t    }\n\t\t\t\t\t// \t\t\t\t\t\t    break;\n\t\t\t\t\t// \t\t\t\t    }\n\t\t\t\t\t// \t\t\t    });\n\t\t\t\t\t// \t\t});\n\t\t\t\t\t// \t}\n\t\t\t\t\t//     return navigator.serviceWorker.ready;\n\t\t\t\t\t//\n\t\t\t\t\t// }, (err) =>\n\t\t\t\t\t// {\n\t\t\t\t\t// \t// registration failed :(\n\t\t\t\t\t// \tconsole.error('SW registration failed: ', err);\n\t\t\t\t\t// });\n\n\t\t\t\t\tnavigator.serviceWorker.addEventListener('controllerchange', function ()\n\t\t\t\t\t{\n\t\t\t\t\t\t// if (!this.service_worker.refreshing && THIS.service_worker.reloadRequested)\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \twindow.location.reload();\n\t\t\t\t\t\t// \tthis.service_worker.refreshing = true;\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// } else\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \tthis.service_worker.refreshing = false;\n\t\t\t\t\t\t// \tthis.service_worker.reloadRequested = false;\n\t\t\t\t\t\t// \treturn\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t},\n\t\t\t_navigateTo(url, buh)\n\t\t\t{\n\t\t\t\tthis.lf.setItem(\"buh\", buh)\n\t\t\t\t    .catch(error => {console.error(error)});\n\t\t\t\twindow.location = url;\n\t\t\t},\n\t\t\t_setCookie(key, value)\n\t\t\t{\n\t\t\t\tdocument.cookie = `${key}=${value};`;\n\t\t\t},\n\t\t\tmyfetch(p)\n\t\t\t{\n\t\t\t\tlet request = new Request(\"https://pwa.local:8080/update.js\");\n\t\t\t\trequest.headers.append(\"X-X\", p);\n\t\t\t\tfetch(request);\n\t\t\t}\n\t\t}\n\t}\n\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <v-app>\n        <v-toolbar app>\n            <v-toolbar-side-icon v-on:click=\"callChild()\"></v-toolbar-side-icon>\n            <v-toolbar-title class=\"black--text\">PWA Demo</v-toolbar-title>\n\n            <v-spacer></v-spacer>\n            <v-btn icon\n                   @click=\"requestPermission()\">\n                <v-icon>notifications</v-icon>\n            </v-btn>\n\n        </v-toolbar>\n\n        <v-content>\n            <Navbar ref=\"Navbar\" />\n\n            <router-view />\n            <!--            <h1 id=\"nr\">Number</h1>-->\n<!--            <a style=\"position:absolute; top: 65px; right: 10px;\"-->\n<!--               v-on:click=\"send_message_to_sw(0)\">Cookie 0-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 80px; right: 10px;\"-->\n<!--               v-on:click=\"send_message_to_sw(1)\">Cookie 1-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 95px; right: 10px;\"-->\n<!--               v-on:click=\"send_message_to_sw(2)\">Cookie 2-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 110px; right: 10px;\"-->\n<!--               v-on:click=\"send_message_to_sw(3)\">Cookie 3-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 140px; right: 10px;\"-->\n<!--               v-on:click=\"_setCookie('Type', 4)\">Cookie 4-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 155px; right: 10px;\"-->\n<!--               v-on:click=\"_navigateTo('/1', {'tag': 'alfa', 'num': 0})\">Request 1-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 175px; right: 10px;\"-->\n<!--               v-on:click=\"_navigateTo('/1', {'tag': 'beta', 'num': 1})\">Request 2-->\n<!--            </a>-->\n\n            <a style=\"position:absolute; top: 190px; right: 10px;\"\n               v-on:click=\"myfetch(1)\">Request 1\n            </a>\n<!--            <a style=\"position:absolute; top: 205px; right: 10px;\"-->\n<!--               v-on:click=\"myfetch(2)\">Request 2-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 220px; right: 10px;\"-->\n<!--               v-on:click=\"_testMethod()\">jsqmdlfkjqslmdjfq-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 240px; right: 10px;\"-->\n<!--               href=\"https://localhost:8080\">Request 2-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 35px; right: 10px;\"-->\n<!--               v-on:click=\"send_new_sw()\">UPDATE SW-->\n<!--            </a>-->\n<!--            <a style=\"position:absolute; top: 50px; right: 10px;\"-->\n<!--               v-on:click=\"request_from_sw()\">REQUEST-->\n<!--            </a>-->\n\n            <!--            <form action=\"/\" method=\"post\">-->\n\n            <!--                <button>Submit</button>-->\n            <!--            </form>-->\n\n        </v-content>\n    </v-app>\n</template>\n\n<script>\n\timport Product from \"./components/Product\";\n\timport Post from './components/Post';\n\timport Navbar from './components/Navbar';\n\n\timport {MagentoAPIService} from \"./services/MagentoAPIService\";\n\timport {FirebaseService} from \"./services/FirebaseService\";\n\timport * as firebase from 'firebase/app';\n\timport 'firebase/messaging';\n\timport * as localForage from \"localforage\";\n\timport axios from 'axios';\n\timport './env.js';\n\timport {ServiceWorkerLib} from './modules/ServiceWorkerLib.ts';\n\n\texport default {\n\t\tname: 'App',\n\t\tcomponents: {\n\t\t\tProduct,\n\t\t\tPost,\n\t\t\t'Navbar': Navbar\n\t\t},\n\t\tdata()\n\t\t{\n\t\t\treturn {\n\t\t\t\tfirebase:\n\t\t\t\t{\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tapiKey: \"AIzaSyAyGInviSJMCyZV_XHLIRa8fKAt-wsaAJA\",\n\t\t\t\t\t\tauthDomain: \"pwademo-763.firebaseapp.com\",\n\t\t\t\t\t\tdatabaseURL: \"https://pwademo-763.firebaseio.com\",\n\t\t\t\t\t\tprojectId: \"pwademo-763\",\n\t\t\t\t\t\tstorageBucket: \"pwademo-763.appspot.com\",\n\t\t\t\t\t\tmessagingSenderId: \"857384407396\"\n\t\t\t\t\t},\n\t\t\t\t\tmessaging: null,\n\t\t\t\t\ttoken: null,\n\t\t\t\t},\n\t\t\t\tswLib: null,\n\t\t\t\tservice_worker:\n\t\t\t\t{\n\t\t\t\t\trefreshing: false,\n\t\t\t\t\treloadRequested: false\n\t\t\t\t},\n\t\t\t\tlf: null,\n\t\t\t\tcurrentWorker: null,\n\t\t\t\tnewWorker: null,\n\t\t\t\tdrawer: '',\n\t\t\t\titems: [\n\t\t\t\t\t{title: 'Home', icon: 'dashboard', link: '/'},\n\t\t\t\t\t{title: 'Categories', icon: 'dashboard', link: '/categories'},\n\t\t\t\t\t{title: 'About', icon: 'question_answer', link: '/about'},\n\t\t\t\t\t{title: 'Products', icon: 'question_answer', link: '/products'},\n\t\t\t\t\t{title: 'Update', icon: 'question_answer', link: '/update'},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Bare Update', icon: 'question_answer', link:\n\t\t\t\t\t\t'/update-without-skip-and-claim'\n\t\t\t\t\t},\n\t\t\t\t\t{title: 'Update with skip', icon: 'question_answer', link: '/update-with-skip-no-claim'},\n\t\t\t\t\t{title: 'Update with skip & claim', icon: 'question_answer', link: '/update-with-skip-and-claim'},\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tcomputed:\n\t\t{\n\t\t\tposts: function ()\n\t\t\t{\n\t\t\t\tlet posts = this.$store.getters['posts/allPosts'];\n\t\t\t\t// console.log(\"All Posts: \", posts);\n\t\t\t\treturn posts;\n\t\t\t},\n\t\t\tproducts: function ()\n\t\t\t{\n\t\t\t\tlet products = this.$store.getters['products/allProducts'];\n\t\t\t\t// console.log(\"All Posts: \", posts);\n\t\t\t\treturn products;\n\t\t\t},\n\t\t\tfirebase_token()\n\t\t\t{\n\n\t\t\t}\n\t\t},\n\t\tasync created()\n\t\t{\n\t\t\tlocalForage.config({\n\t\t\t\t                   name: 'Alessio',\n\t\t\t\t                   version: 1.0,\n\t\t\t\t                   size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n\t\t\t\t                   storeName: 'lf', // Should be alphanumeric, with underscores.\n\t\t\t\t                   description: 'some description'\n\t\t\t                   });\n\t\t\tthis.lf = localForage.createInstance({name: \"lf\"});\n\t\t\tthis.sw();\n\t\t\tthis.firebaseNotificationsHandler();\n\n\t\t\t// this.send_msg_to_sw_with_response({action: 'SW'})\n\t\t\t//     .then(m =>\n\t\t\t//           {\n\t\t\t// \t          console.log(\"SW VERSION: \", m)\n\t\t\t//           }\n\t\t\t//     );\n\n\t\t\t// axios.get(\"https://pwa.local:8080/api\")\n\t\t\t//      .then(response => {\n\t\t\t//      \tdocument.getElementById(\"nr\").innerHTML = response.data;\n\t\t\t//      }).catch(error => console.error(error));\n\n\t\t\t// window.onbeforeunload = async function (event)\n\t\t\t// {\n\t\t\t// \tevent.preventDefault();\n\t\t\t// \tconsole.log(\"FETCH RECEIVED\");\n\t\t\t// \tlet registration = await navigator.serviceWorker.register(\"/sw.js\")\n\t\t\t// \t                                  .then((registration) =>\n\t\t\t// \t                                        {\n\t\t\t// \t\t                                        return registration\n\t\t\t// \t                                        });\n\t\t\t// \tlet waiting = registration.waiting;\n\t\t\t// \tif (waiting)\n\t\t\t// \t{\n\t\t\t// \t\tconsole.log(\"WAITING SW AV\");\n\t\t\t// \t\tif ('serviceWorker' in navigator)\n\t\t\t// \t\t{\n\t\t\t// \t\t\tregistration.active.postMessage({action: 'updateIfSingleClient'})\n\t\t\t// \t\t\t            .then((response) =>\n\t\t\t// \t\t\t                  {\n\t\t\t// \t\t\t\t                  console.log(response)\n\t\t\t// \t\t\t                  });\n\t\t\t// \t\t}\n            //\n\t\t\t// \t}\n\t\t\t// \tconsole.log(\"Main route change\");\n\t\t\t// \treturn \"Are you sure you want to navigate away?\";\n\t\t\t// }\n\t\t},\n\t\twatch: {\n\t\t\tasync $route(to, from)\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\t// let registration = await navigator.serviceWorker.register(\"/sw.js\")\n\t\t\t\t//                                   .then((registration) =>\n\t\t\t\t//                                         {\n\t\t\t\t// \t                                        return registration\n\t\t\t\t//                                         });\n\t\t\t\t// let waiting = registration.waiting;\n\n\t\t\t\t// if (waiting && false)\n                /*\n\t\t\t\tif (false)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"WAITING SW AV\");\n\t\t\t\t\tthis.send_msg_to_sw_with_response({action: 'updateIfSingleClient'})\n\t\t\t\t\t    .then(m =>\n\t\t\t\t\t          {\n\t\t\t\t\t\t          console.log(m)\n                                  if (m === \"UPDATE\")\n                                  {\n                                  \twaiting.addEventListener('statechange', (event) =>\n                                    {\n\t                                    // const activating = (event.target.state === 'activating');\n                                    \tlet activated = (event.target.state === 'activated');\n\t                                    let a = (registration.active.state === 'activated');\n\t                                    let ab = (waiting.state === 'activated');\n\t                                    let buh = event.target.state.startsWith('activated');\n\t                                    // event.currentTarget.postMessage({action: 'SW'});\n\t                                    let c = event.currentTarget.state;\n\t                                    this.pp(event.currentTarget, {action: 'SW'}).then(m =>\n                                                                                          console.log(\"SW Version: \",\n                                                                                                      m));\n\t                                    // event.target.postMessage({action: 'SW'});\n\t                                    let d = event.target.state;\n\t                                    this.pp(event.target, {action: 'SW'}).then(m =>\n\t                                                                               console.log(\"SW Version: \",\n\t                                                                                           m));\n\t                                    // waiting.postMessage({action: 'claim'});\n                                    \t// if(activating)\n                                        // {\n                                        //\n                                        // }\n                                    \t// else\n                                        if (ab)\n                                        {\n\t\t                                  waiting.postMessage({action: 'claim'});\n\t                                        // this.send_msg_to_sw_with_response({action: 'SW'})\n\t                                        //     .then(m =>\n\t                                        //           {\n\t\t                                    //               console.log(\"SW VERSION: \", m)\n\t                                        //           }\n\t                                        //     );\n                                        }\n\n                                    });\n                                  }\n\t\t\t\t\t          }\n\t\t\t\t\t    );\n\n\n\t\t\t\t\t// if ('serviceWorker' in navigator)\n\t\t\t\t\t// {\n\t\t\t\t\t// \tthis.send_message_to_sw(\"qslmdfkjqmlsdj\");\n\t\t\t\t\t// }\n\t\t\t\t\t// navigator.serviceWorker.controller.postMessage({action: 'updateIfSingleClient'});\n\n\t\t\t\t\t// .then((response) =>\n\t\t\t\t\t//       {\n\t\t\t\t\t//           console.log(response)\n\t\t\t\t\t//       });\n\n\t\t\t\t}\n*/\n\t\t\t\t// navigator.serviceWorker.addEventListener('controllerchange', function ()\n\t\t\t\t// {\n\t\t\t\t// \tthis.send_msg_to_sw_with_response({action: 'SW'})\n\t\t\t\t// \t    .then(m =>\n\t\t\t\t// \t          {\n\t\t\t\t// \t\t          console.log(\"SW VERSION: \", m)\n\t\t\t\t// \t          }\n\t\t\t\t// \t    );\n\t\t\t\t// });\n\n\t\t\t\t// console.log(\"Main route change\");\n\t\t\t}\n\t\t},\n\t\tmethods:\n\t\t{\n\t\t\t_testMethod()\n            {\n\t            this.send_msg_to_sw_with_response({action: 'SW'}).then(m => console.log(m))\n            },\n\t\t\tcallChild()\n\t\t\t{\n\t\t\t\t// this.bus.$emit('toggleNavbar');\n\t\t\t\tthis.$refs.Navbar._toggleNavbar();\n\t\t\t},\n\t\t\t_firebaseInit()\n\t\t\t{\n\t\t\t\tfirebase.initializeApp(this.firebase.config);\n\t\t\t\tthis.firebase.messaging = firebase.messaging();\n\t\t\t\tthis.firebase.messaging.usePublicVapidKey(\"BHEX_KV05JO3refzgJbNXaXObnSiCb2kjx1rOsLWhMon4dea2ddfiYD0iLBHm6DsQkVp8sCLr2Ypuuz6haDnOzo\");\n\t\t\t},\n\t\t\t_firebaseGetToken()\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\treturn THIS.firebase.messaging\n\t\t\t\t           .getToken()\n\t\t\t\t           .then(function (currentToken)\n\t\t\t\t                 {\n\t\t\t\t\t                 if (currentToken)\n\t\t\t\t\t                 {\n\t\t\t\t\t\t                 THIS.firebase.token = currentToken;\n\t\t\t\t\t\t                 THIS.lf.setItem(\"token\", currentToken)\n\t\t\t\t\t\t                     .then((value) =>\n\t\t\t\t\t\t                           {\n\t\t\t\t\t\t\t                           console.log(\"LocalForage: \", value)\n\t\t\t\t\t\t                           })\n\t\t\t\t\t\t                     .catch((error) =>\n\t\t\t\t\t\t                            {\n\t\t\t\t\t\t\t                            console.error(\"LocalForage: \", error)\n\t\t\t\t\t\t                            });\n\t\t\t\t\t\t                 console.log(\"TOKEN: \", currentToken);\n\t\t\t\t\t\t                 currentToken;\n\t\t\t\t\t                 } else\n\t\t\t\t\t                 {\n\t\t\t\t\t\t                 console.log('No Instance ID token available. Request permission to generate one.');\n\t\t\t\t\t                 }\n\t\t\t\t                 })\n\t\t\t\t           .catch(function (err)\n\t\t\t\t                  {\n\t\t\t\t\t                  console.log('An error occurred while retrieving token. ', err);\n\t\t\t\t\t                  // setTokenSentToServer(false);\n\t\t\t\t                  });\n\n\t\t\t},\n\t\t\t_firebaseRequestPermission()\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\tthis.firebase.messaging\n\t\t\t\t    .requestPermission()\n\t\t\t\t    .then(() =>\n\t\t\t\t          {\n\t\t\t\t\t          // console.log('Notification permission granted.');\n\t\t\t\t\t          this._firebaseGetToken()\n\t\t\t\t\t              .then((response) =>\n\t\t\t\t\t                    {\n\t\t\t\t\t\t                    // let payload = {\n\t\t\t\t\t\t                    //     \t   \"to\": THIS.firebase.token,\n\t\t\t\t\t\t                    //         \"collapse_key\": \"type_a\",\n\t\t\t\t\t\t                    //         \"notification\":\n\t\t\t\t\t\t                    //         {\n\t\t\t\t\t\t                    //             \"title\": \"payload.title\",\n\t\t\t\t\t\t                    //             \"body\": \"payload.body\",\n\t\t\t\t\t\t                    //             \"icon\": \"payload.icon\",\n\t\t\t\t\t\t                    //             \"click_action\": \"payload.action\"\n\t\t\t\t\t\t                    //         },\n\t\t\t\t\t\t                    //         \"data\":\n\t\t\t\t\t\t                    //         {\n\t\t\t\t\t\t                    //             \"shown\": false\n\t\t\t\t\t\t                    //         }\n\t\t\t\t\t\t                    // };\n\t\t\t\t\t\t                    // FirebaseService.sendNotificationToSelf(payload)\n\t\t\t\t\t                    })\n\n\t\t\t\t          })\n\t\t\t\t    .catch((err) =>\n\t\t\t\t           {\n\t\t\t\t\t           console.log('Unable to get permission to notify.', err);\n\t\t\t\t           });\n\t\t\t},\n\t\t\tfirebaseNotificationsHandler()\n\t\t\t{\n\t\t\t\tconst THIS = this;\n\t\t\t\tthis._firebaseInit();\n\t\t\t\tthis._firebaseRequestPermission();\n\n\t\t\t\t// -----------------------------------------------------------------------------------------------------\n\t\t\t\t// Event listeners\n\n\t\t\t\tTHIS.firebase.messaging\n\t\t\t\t    .onTokenRefresh(\n\t\t\t\t    () =>\n\t\t\t\t    {\n\t\t\t\t\t    this._firebaseGetToken();\n\t\t\t\t\t    console.log(\"TOKEN REFRESHED: \", THIS.firebase.token)\n\t\t\t\t    });\n\n\t\t\t\tTHIS.firebase.messaging\n\t\t\t\t    .onMessage(\n\t\t\t\t    (payload) =>\n\t\t\t\t    {\n\t\t\t\t\t    console.log('Message received. ', payload);\n\t\t\t\t\t    if (Notification.permission === 'granted')\n\t\t\t\t\t    {\n\t\t\t\t\t\t    const notification = new Notification(payload.notification.title, {\n\t\t\t\t\t\t\t    icon: payload.notification.icon,\n\t\t\t\t\t\t\t    body: payload.notification.body,\n\t\t\t\t\t\t    });\n\t\t\t\t\t\t    notification.onclick = function ()\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    console.log(\"NOTIFCATION CLICK\");\n\t\t\t\t\t\t\t    window.open(payload.notification.click_action,\n\t\t\t\t\t\t\t                \"_blank\");\n\t\t\t\t\t\t    };\n\t\t\t\t\t\t    return notification;\n\t\t\t\t\t    }\n\t\t\t\t    });\n\t\t\t},\n\t\t\tsend_msg_to_sw_with_response(msg)\n\t\t\t{\n\t\t\t\treturn new Promise(function (resolve, reject)\n\t\t\t\t                   {\n\t\t\t\t\t                   var messageChannel = new MessageChannel();\n\t\t\t\t\t                   messageChannel.port1.onmessage = function (event)\n\t\t\t\t\t                   {\n\t\t\t\t\t\t                   if (event.data.error)\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   reject(event.data.error);\n\t\t\t\t\t\t                   } else\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   resolve(event.data);\n\t\t\t\t\t\t                   }\n\t\t\t\t\t                   };\n\n\t\t\t\t\t                   navigator.serviceWorker.controller.postMessage(msg,\n\t\t\t\t\t                                                                  [messageChannel.port2]);\n\t\t\t\t                   });\n\t\t\t},\n\t\t\tpp(sw, msg)\n\t\t\t{\n\t\t\t\treturn new Promise(function (resolve, reject)\n\t\t\t\t                   {\n\t\t\t\t\t                   var messageChannel = new MessageChannel();\n\t\t\t\t\t                   messageChannel.port1.onmessage = function (event)\n\t\t\t\t\t                   {\n\t\t\t\t\t\t                   if (event.data.error)\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   reject(event.data.error);\n\t\t\t\t\t\t                   } else\n\t\t\t\t\t\t                   {\n\t\t\t\t\t\t\t                   resolve(event.data);\n\t\t\t\t\t\t                   }\n\t\t\t\t\t                   };\n\n\t\t\t\t\t                   sw.postMessage(msg, [messageChannel.port2]);\n\t\t\t\t                   });\n\t\t\t},\n\t\t\tsend_message_to_sw(msg)\n\t\t\t{\n\t\t\t\tif ('serviceWorker' in navigator)\n\t\t\t\t{\n\t\t\t\t\tconst currentWorker = this.swLib.getCurrentWorker();\n\t\t\t\t\tlet cookie = `Type=${msg}`;\n\t\t\t\t\tthis._setCookie(\"Type\", msg);\n\t\t\t\t\tcurrentWorker.postMessage(\n\t\t\t\t\t{\n\t\t\t\t\t\t\"dev_comm\": true,\n\t\t\t\t\t\t\"cookie\": cookie\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\trequest_from_sw()\n\t\t\t{\n\t\t\t\tlet request = new Request(\"/update.js\");\n\t\t\t\tconst requestOptions = {method: 'GET'};\n\t\t\t\treturn fetch(request, requestOptions)\n\t\t\t\t.then((response) =>\n\t\t\t\t      {\n\t\t\t\t\t      return {\n\t\t\t\t\t\t      request: request,\n\t\t\t\t\t\t      response: response\n\t\t\t\t\t      };\n\t\t\t\t      })\n\t\t\t\t.catch(error =>\n\t\t\t\t       {\n\t\t\t\t\t       console.error(error);\n\t\t\t\t\t       console.error(JSON.stringify(error));\n\t\t\t\t\t       return {\n\t\t\t\t\t\t       request: request,\n\t\t\t\t\t\t       response: response\n\t\t\t\t\t       };\n\t\t\t\t       });\n\t\t\t},\n\t\t\tsend_new_sw()\n\t\t\t{\n\t\t\t\tif (this.newWorker)\n\t\t\t\t\tthis.newWorker.postMessage({action: 'skipWaiting'});\n\t\t\t},\n\t\t\tsw()\n\t\t\t{\n\t\t\t\twindow.addEventListener(\n\t\t\t\t'load',\n\t\t\t\tasync () =>\n\t\t\t\t{\n\t\t\t\t\tthis.swLib = new ServiceWorkerLib(\"/sw.js\", \"/\");\n\t\t\t\t\tconsole.log(\"REGISTRATION: \", this.swLib);\n\t\t\t\t\twindow.addEventListener(\"newSW\", () => {console.log(\"newSW arrived\")});\n\t\t\t\t\t// if (event.request.mode === 'navigate' && this.swLib.waiting) {\n\t\t\t\t\t// \tif ((await clients.matchAll()).length < 2) {\n\t\t\t\t\t// \t\tregistration.waiting.postMessage(\"skipWaiting\");\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// const registration = swLib;\n\t\t\t\t\t//\n\t\t\t\t\t// registration\n\t\t\t\t\t// .then(\n\t\t\t\t\t// (registration) =>\n\t\t\t\t\t// {\n\t\t\t\t\t// \t// Registration was successful\n\t\t\t\t\t//     this.currentWorker = registration;\n\t\t\t\t\t//\n\t\t\t\t\t// \t// Source: https://stackoverflow.com/questions/37573482/to-check-if-serviceworker-is-in-waiting-state\n\t\t\t\t\t// \tif (registration.waiting && registration.active)\n\t\t\t\t\t// \t{\n\t\t\t\t\t// \t\tthis.newWorker = registration.waiting;\n\t\t\t\t\t// \t} else\n\t\t\t\t\t// \t{\n\t\t\t\t\t// \t\tregistration.addEventListener(\n\t\t\t\t\t// \t\t'updatefound',\n\t\t\t\t\t// \t\t() =>\n\t\t\t\t\t// \t\t{\n\t\t\t\t\t// \t\t\tthis.newWorker = registration.installing;\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t\tthis.newWorker\n\t\t\t\t\t// \t\t\t    .addEventListener(\n\t\t\t\t\t// \t\t\t    'statechange',\n\t\t\t\t\t// \t\t\t    () =>\n\t\t\t\t\t// \t\t\t    {\n\t\t\t\t\t// \t\t\t\t    // Has service worker state changed?\n\t\t\t\t\t// \t\t\t\t    switch (this.newWorker.state)\n\t\t\t\t\t// \t\t\t\t    {\n\t\t\t\t\t// \t\t\t\t\t    case 'installed':\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t\t\t\t\t    // There is a new service worker available, show the\n\t\t\t\t\t// \t\t\t\t\t\t    // notification\n\t\t\t\t\t// \t\t\t\t\t\t    if (navigator.serviceWorker.controller)\n\t\t\t\t\t// \t\t\t\t\t\t    {\n\t\t\t\t\t// \t\t\t\t\t\t\t    console.log(\"NEW SW AVAILABLE\");\n\t\t\t\t\t// \t\t\t\t\t\t    }\n\t\t\t\t\t// \t\t\t\t\t\t    break;\n\t\t\t\t\t// \t\t\t\t    }\n\t\t\t\t\t// \t\t\t    });\n\t\t\t\t\t// \t\t});\n\t\t\t\t\t// \t}\n\t\t\t\t\t//     return navigator.serviceWorker.ready;\n\t\t\t\t\t//\n\t\t\t\t\t// }, (err) =>\n\t\t\t\t\t// {\n\t\t\t\t\t// \t// registration failed :(\n\t\t\t\t\t// \tconsole.error('SW registration failed: ', err);\n\t\t\t\t\t// });\n\n\t\t\t\t\tnavigator.serviceWorker.addEventListener('controllerchange', function ()\n\t\t\t\t\t{\n\t\t\t\t\t\t// if (!this.service_worker.refreshing && THIS.service_worker.reloadRequested)\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \twindow.location.reload();\n\t\t\t\t\t\t// \tthis.service_worker.refreshing = true;\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// } else\n\t\t\t\t\t\t// {\n\t\t\t\t\t\t// \tthis.service_worker.refreshing = false;\n\t\t\t\t\t\t// \tthis.service_worker.reloadRequested = false;\n\t\t\t\t\t\t// \treturn\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t},\n\t\t\t_navigateTo(url, buh)\n\t\t\t{\n\t\t\t\tthis.lf.setItem(\"buh\", buh)\n\t\t\t\t    .catch(error => {console.error(error)});\n\t\t\t\twindow.location = url;\n\t\t\t},\n\t\t\t_setCookie(key, value)\n\t\t\t{\n\t\t\t\tdocument.cookie = `${key}=${value};`;\n\t\t\t},\n\t\t\tmyfetch(p)\n\t\t\t{\n\t\t\t\tlet request = new Request(\"https://pwa.local:8080/update.js\");\n\t\t\t\trequest.headers.append(\"X-X\", p);\n\t\t\t\tfetch(request);\n\t\t\t}\n\t\t}\n\t}\n\n</script>\n"]}]}